[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/PopApi.js",
    "content": "// Import the necessary modules.\n// @flow\nimport debug from 'debug'\n/**\n * Fast, unopinionated, minimalist web framework for node.\n * @external {Express} https://github.com/expressjs/express\n */\nimport express, { type $Application } from 'express'\nimport { isMaster } from 'cluster'\nimport { join } from 'path'\n\nimport {\n  Cli,\n  Database,\n  HttpServer,\n  Logger,\n  Routes\n} from './middleware'\nimport * as utils from './utils'\nimport { name } from '../package.json'\n\n/**\n * The default log directory.\n * @type {string}\n */\nconst defaultLogDir = join(...[\n  __dirname,\n  '..',\n  'tmp'\n])\n\n/**\n * The PopApi class with the middleware pattern.\n * @type {PopApi}\n */\nexport default class PopApi {\n\n  /**\n   * The database connection.\n   * @type {Database}\n   */\n  static database: Database\n\n  /**\n   * The arguments passed down to the logger middleware.\n   * @type {Object}\n   */\n  static loggerArgs: Object\n\n  /**\n   * The application instance for the PopApi framework.\n   * @type {Express}\n   */\n  static app: $Application = express()\n\n  /**\n   * The debugger for extra  output.\n   * @type {Function}\n   */\n  static debug: Function = debug(name)\n\n  /**\n   * A map of the installed plugins.\n   * @type {Map<any>}\n   */\n  static _installedPlugins: Map<string, any> = new Map()\n\n  /**\n   * The setup for the base framework.\n   * @param {!Object} options - The options for the framework.\n   * @param {!Express} [options.app=PopApi.app] - The web framework instance you\n   * want to use.\n   * @param {!Array<Object>} options.controllers - The controllers to register.\n   * @param {!string} options.name - The name for your API.\n   * @param {!string} options.version - The version of your API.\n   * @param {?string} options.logDir - The directory to store the log files in.\n   * @param {?Array<string>} [options.hosts] - The hosts of\n   * the database cluster.\n   * @param {?number} [options.dbPort] - The port the database is on.\n   * @param {?string} [options.username] - The username for the database\n   * connection.\n   * @param {?string} [options.password] - The password for the database\n   * connection.\n   * @param {?number} [options.serverPort] - The port the API will run on.\n   * @param {?number} [options.workers] - The number of workers for the API.\n   * @param {?Object} [options.opts] - Additionl options for custom\n   * middlewares.\n   * @param {!Array<Function>} middlewares - The list of middlewares to use.\n   * The order of the middlewares is important.\n   * @returns {Promise<PopApi, Error>} - The initialized PopApi instance.\n   */\n  static async init({\n    app = PopApi.app,\n    controllers,\n    name,\n    version,\n    logDir = defaultLogDir,\n    hosts,\n    dbPort,\n    username,\n    password,\n    serverPort,\n    workers,\n    ...opts\n  }: Object, middlewares: Array<Function> = [\n    Cli,\n    Logger,\n    Database,\n    Routes,\n    HttpServer\n  ]): Promise<Object | Error> {\n    PopApi.app = app\n    if (isMaster) {\n      await utils.createTemp(logDir)\n    }\n\n    middlewares.map(Middleware => {\n      PopApi.use(Middleware, {\n        app,\n        controllers,\n        name,\n        version,\n        logDir,\n        database: name,\n        hosts,\n        dbPort,\n        username,\n        password,\n        serverPort,\n        workers,\n        argv: process.argv,\n        ...PopApi.loggerArgs,\n        ...opts\n      })\n    })\n    await PopApi.database.connect()\n\n    return PopApi\n  }\n\n  /**\n   * Register middleware for the PopApi framework.\n   * @param {!Function} Plugin - The plugin to use.\n   * @param {!Object} args - The arguments passed down to the constructor of\n   * the plugin.\n   * @returns {Promise<PopApi>} - The PopApi instance with the installed\n   * plugins.\n   */\n  static use(Plugin: any, ...args: any): any {\n    if (PopApi._installedPlugins.has(Plugin)) {\n      return this\n    }\n\n    const plugin = typeof Plugin === 'function'\n      ? new Plugin(this, ...args)\n      : null\n\n    if (plugin) {\n      PopApi._installedPlugins.set(Plugin, plugin)\n    }\n\n    return this\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/PopApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "Express",
    "externalLink": "https://github.com/expressjs/express",
    "memberof": "src/PopApi.js",
    "static": true,
    "longname": "src/PopApi.js~Express",
    "access": "public",
    "description": "Fast, unopinionated, minimalist web framework for node.",
    "lineNumber": 8
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "defaultLogDir",
    "memberof": "src/PopApi.js",
    "static": true,
    "longname": "src/PopApi.js~defaultLogDir",
    "access": "public",
    "export": false,
    "importPath": "pop-api/src/PopApi.js",
    "importStyle": null,
    "description": "The default log directory.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "PopApi",
    "memberof": "src/PopApi.js",
    "static": true,
    "longname": "src/PopApi.js~PopApi",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/PopApi.js",
    "importStyle": "PopApi",
    "description": "The PopApi class with the middleware pattern.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "PopApi"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "database",
    "memberof": "src/PopApi.js~PopApi",
    "static": true,
    "longname": "src/PopApi.js~PopApi.database",
    "access": "public",
    "description": "The database connection. ",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "loggerArgs",
    "memberof": "src/PopApi.js~PopApi",
    "static": true,
    "longname": "src/PopApi.js~PopApi.loggerArgs",
    "access": "public",
    "description": "The arguments passed down to the logger middleware. ",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "app",
    "memberof": "src/PopApi.js~PopApi",
    "static": true,
    "longname": "src/PopApi.js~PopApi.app",
    "access": "public",
    "description": "The application instance for the PopApi framework. ",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "$Application"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "debug",
    "memberof": "src/PopApi.js~PopApi",
    "static": true,
    "longname": "src/PopApi.js~PopApi.debug",
    "access": "public",
    "description": "The debugger for extra  output. ",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_installedPlugins",
    "memberof": "src/PopApi.js~PopApi",
    "static": true,
    "longname": "src/PopApi.js~PopApi._installedPlugins",
    "access": "private",
    "description": "A map of the installed plugins. ",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "init",
    "memberof": "src/PopApi.js~PopApi",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/PopApi.js~PopApi.init",
    "access": "public",
    "description": "The setup for the base framework.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<PopApi, Error>} - The initialized PopApi instance."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the framework."
      },
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "PopApi.app",
        "defaultRaw": "PopApi.app",
        "name": "options.app",
        "description": "The web framework instance you\nwant to use."
      },
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.controllers",
        "description": "The controllers to register."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "The name for your API."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.version",
        "description": "The version of your API."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.logDir",
        "description": "The directory to store the log files in."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "options.hosts",
        "description": "The hosts of\nthe database cluster."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.dbPort",
        "description": "The port the database is on."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.username",
        "description": "The username for the database\nconnection."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.password",
        "description": "The password for the database\nconnection."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.serverPort",
        "description": "The port the API will run on."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.workers",
        "description": "The number of workers for the API."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.opts",
        "description": "Additionl options for custom\nmiddlewares."
      },
      {
        "nullable": false,
        "types": [
          "Array<Function>"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "The list of middlewares to use.\nThe order of the middlewares is important."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PopApi, Error>"
      ],
      "spread": false,
      "description": "The initialized PopApi instance."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "use",
    "memberof": "src/PopApi.js~PopApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/PopApi.js~PopApi.use",
    "access": "public",
    "description": "Register middleware for the PopApi framework.  ",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<PopApi>} - The PopApi instance with the installed\nplugins.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "Plugin",
        "description": "The plugin to use."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments passed down to the constructor of\nthe plugin."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PopApi>"
      ],
      "spread": false,
      "description": "The PopApi instance with the installed\nplugins."
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/controllers/BaseContentController.js",
    "content": "// Import the necessary modules.\n// @flow\nimport type {\n  $Response,\n  $Request,\n  NextFunction\n} from 'express'\nimport type { MongooseModel } from 'mongoose'\n\nimport IContentController from './IContentController'\nimport type ContentService from './ContentService'\n\n/**\n * Base class for getting content from endpoints.\n * @implements {IContentController}\n * @type {BaseContentController}\n */\nexport default class BaseContentController extends IContentController {\n\n  /**\n   * The base path for the routes.\n   * @type {string}\n   */\n  basePath: string\n\n  /**\n   * The service of the content controller.\n   * @type {ContentService}\n   */\n  service: ContentService\n\n  /**\n   * Create a new base content controller.\n   * @param {!Object} options - The options for the base content controller.\n   * @param {!string} options.basePath - The base path for the routes.\n   * @param {!ContentService} options.service - The service for the content\n   * controller.\n   */\n  constructor({basePath, service}: Object): void {\n    super()\n\n    /**\n     * The base path for the routes.\n     * @type {string}\n     */\n    this.basePath = basePath\n    /**\n     * The service of the content controller.\n     * @type {ContentService}\n     */\n    this.service = service\n  }\n\n  /**\n   * Default method to register the routes.\n   * @override\n   * @param {!Object} router - The router to register the routes to.\n   * @param {!PopApi} PopApi - The PopApi instance.\n   * @returns {undefined}\n   */\n  registerRoutes(router: Object, PopApi: any): void {\n    const t = this.basePath\n\n    router.get(`/${t}s`, this.getContents.bind(this))\n    router.get(`/${t}s/:page`, this.getPage.bind(this))\n    router.get(`/${t}/:id`, this.getContent.bind(this))\n    router.post(`/${t}s`, this.createContent.bind(this))\n    router.put(`/${t}/:id`, this.updateContent.bind(this))\n    router.get(`/random/${t}`, this.getRandomContent.bind(this))\n    if (typeof router.delete === 'function') {\n      router.delete(`/${t}/:id`, this.deleteContent.bind(this))\n    } else {\n      router.del(`/${t}/:id`, this.deleteContent.bind(this))\n    }\n  }\n\n  /**\n   * Check if the content is empty or the length of the content array is zero.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Object|Array<Object>} content - The content to check.\n   * @returns {Object} - Returns a 204 response if the content is empty, or a\n   * 200 response with the content if it is not empty.\n   */\n  checkEmptyContent(res: $Response, content: any): Object {\n    res.setHeader('Content-Type', 'application/json')\n    if (!content || content.length === 0) {\n      res.status(204)\n      return res.send()\n    }\n\n    res.status(200)\n    return res.send(content)\n  }\n\n  /**\n   * Get all the available pages.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Array<string>, Error>} - A list of pages which are\n   * available.\n   */\n  getContents(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Array<string> | mixed> {\n    return this.service.getContents(`/${this.basePath}`)\n      .then(content => this.checkEmptyContent(res, content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Default method to sort the items.\n   * @override\n   * @param {!string} sort - The property to sort on.\n   * @param {!number} order - The way to sort the property.\n   * @returns {Object} - The sort object.\n   */\n  sortContent(sort: string, order: number): Object {\n    return {\n      [sort]: order\n    }\n  }\n\n  /**\n   * Get content from one page.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Array<Object>, Error>} - The content of one page.\n   */\n  getPage(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Array<MongooseModel> | mixed> {\n    const { page } = req.params\n    const { sort, order } = req.query\n\n    const o = parseInt(order, 10) ? parseInt(order, 10) : -1\n    const s = typeof sort === 'string' ? this.sortContent(sort, o) : null\n\n    return this.service.getPage(s, Number(page))\n      .then(content => this.checkEmptyContent(res, content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Get a content item based on the id.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Object, Error>} - The details of a single content item.\n   */\n  getContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    return this.service.getContent(req.params.id)\n      .then(content => this.checkEmptyContent(res, content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Create a new content item.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Object, Error>} - The created content item.\n   */\n  createContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    res.setHeader('Content-Type', 'application/json')\n    return this.service.createContent(req.body)\n      .then(content => res.send(content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Update the info of one content item.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Object, Error>} - The updated content item.\n   */\n  updateContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    res.setHeader('Content-Type', 'application/json')\n    return this.service.updateContent(req.params.id, req.body)\n      .then(content => res.send(content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Delete a content item.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Object, Error>} - The deleted content item\n   */\n  deleteContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    res.setHeader('Content-Type', 'application/json')\n    return this.service.deleteContent(req.params.id)\n      .then(content => res.send(content))\n      .catch(err => next(err))\n  }\n\n  /**\n   * Get a random item.\n   * @override\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Promise<Object, Error>} - A random item.\n   */\n  getRandomContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    return this.service.getRandomContent()\n      .then(content => this.checkEmptyContent(res, content))\n      .catch(err => next(err))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/controllers/BaseContentController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "BaseContentController",
    "memberof": "src/controllers/BaseContentController.js",
    "static": true,
    "longname": "src/controllers/BaseContentController.js~BaseContentController",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/controllers/BaseContentController.js",
    "importStyle": "BaseContentController",
    "description": "Base class for getting content from endpoints.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "BaseContentController"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "src/controllers/IContentController.js~IContentController"
    ],
    "implements": [
      "IContentController"
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "basePath",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#basePath",
    "access": "public",
    "description": "The base path for the routes. ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "service",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#service",
    "access": "public",
    "description": "The service of the content controller. ",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ContentService"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#constructor",
    "access": "public",
    "description": "Create a new base content controller.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the base content controller."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.basePath",
        "description": "The base path for the routes."
      },
      {
        "nullable": false,
        "types": [
          "ContentService"
        ],
        "spread": false,
        "optional": false,
        "name": "options.service",
        "description": "The service for the content\ncontroller."
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "registerRoutes",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#registerRoutes",
    "access": "public",
    "description": "Default method to register the routes.  ",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The router to register the routes to."
      },
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "override": true
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "checkEmptyContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#checkEmptyContent",
    "access": "public",
    "description": "Check if the content is empty or the length of the content array is zero.  ",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Returns a 204 response if the content is empty, or a\n200 response with the content if it is not empty.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Object",
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns a 204 response if the content is empty, or a\n200 response with the content if it is not empty."
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getContents",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#getContents",
    "access": "public",
    "description": "Get all the available pages.  ",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<string>, Error>} - A list of pages which are\navailable.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<string>, Error>"
      ],
      "spread": false,
      "description": "A list of pages which are\navailable."
    },
    "override": true
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "sortContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#sortContent",
    "access": "public",
    "description": "Default method to sort the items.  ",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The sort object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "The property to sort on."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "The way to sort the property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The sort object."
    },
    "override": true
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getPage",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#getPage",
    "access": "public",
    "description": "Get content from one page.  ",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - The content of one page.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "The content of one page."
    },
    "override": true
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#getContent",
    "access": "public",
    "description": "Get a content item based on the id.  ",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The details of a single content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The details of a single content item."
    },
    "override": true
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "createContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#createContent",
    "access": "public",
    "description": "Create a new content item.  ",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The created content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The created content item."
    },
    "override": true
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "updateContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#updateContent",
    "access": "public",
    "description": "Update the info of one content item.  ",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The updated content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The updated content item."
    },
    "override": true
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "deleteContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#deleteContent",
    "access": "public",
    "description": "Delete a content item.  ",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The deleted content item  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The deleted content item"
    },
    "override": true
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getRandomContent",
    "memberof": "src/controllers/BaseContentController.js~BaseContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/BaseContentController.js~BaseContentController#getRandomContent",
    "access": "public",
    "description": "Get a random item.  ",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - A random item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "A random item."
    },
    "override": true
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/controllers/ContentService.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\n/**\n * MongoDB object modeling designed to work in an asynchronous environment.\n * @external {MongooseModel} https://github.com/Automattic/mongoose\n */\nimport type { MongooseModel } from 'mongoose'\n\n/**\n * ContentService class for the CRUD operations.\n * @type {ContentService}\n */\nexport default class ContentService {\n\n  /**\n   * The model of the service.\n   * @type {MongooseModel}\n   */\n  Model: MongooseModel\n\n  /**\n   * The maximum items to display per page.\n   * @type {number}\n   */\n  pageSize: number\n\n  /**\n   * Simple projection for showing multiple content items.\n   * @type {Object}\n   */\n  projection: Object\n\n  /**\n   * The query of the service.\n   * @type {Object}\n   */\n  query: Object\n\n  /**\n   * Create a new ContentService.\n   * @param {!Object} options - The options for the content service.\n   * @param {!MongooseModel} options.Model - The model of the service.\n   * @param {!Object} options.projection - The projection of the service.\n   * @param {!Object} options.query={} - The query of the service.\n   * @param {!number} [options.pageSize=25] - The page size of the service.\n   */\n  constructor({\n    Model,\n    projection,\n    query = {},\n    pageSize = 25\n  }: Object): void {\n    /**\n     * The item type of the service.\n     * @type {MongooseModel}\n     */\n    this.Model = Model\n    /**\n     * The maximum items to display per page.\n     * @type {number}\n     */\n    this.pageSize = pageSize\n    /**\n     * Simple projection for showing multiple content items.\n     * @type {Object}\n     */\n    this.projection = projection\n    /**\n     * Query to only get the content items.\n     * @type {Object}\n     */\n    this.query = query\n  }\n\n  /**\n   * Get all the available pages.\n   * @param {!string} [base=''] - The base of the url to display.\n   * @returns {Promise<Array<string>, Error>} - A list of pages which are\n   * available.\n   */\n  getContents(base: string = ''): Promise<Array<string>> {\n    return this.Model.count(this.query).then(count => {\n      const pages = Math.ceil(count / this.pageSize)\n      const docs = []\n\n      for (let i = 1; i < pages + 1; i++) {\n        docs.push(`${base}/${i}`)\n      }\n\n      return docs\n    })\n  }\n\n  /**\n   * Get content from one page.\n   * @param {?Object} sort - The sort object to sort and order content.\n   * @param {!number} [p=1] - The page to get.\n   * @param {!Object} [query=this.query] - A copy of the query object to\n   * get the objects.\n   * @returns {Promise<Array<MongooseModel>, Error>} - The content of one page.\n   */\n  getPage(\n    sort?: Object | null,\n    p?: number | string = 1,\n    query?: Object = {\n      ...this.query\n    }\n  ): Promise<Array<any>> {\n    const page = !isNaN(p) ? Number(p) - 1 : 0\n    const offset = page * this.pageSize\n\n    let aggregateQuery = [{\n      $match: query\n    }, {\n      $project: this.projection\n    }]\n\n    if (sort) {\n      aggregateQuery = [...aggregateQuery, {\n        $sort: sort\n      }]\n    }\n\n    if (typeof p === 'string' && p.toLowerCase() === 'all') {\n      return this.Model.aggregate(aggregateQuery)\n    }\n\n    aggregateQuery = [...aggregateQuery, {\n      $skip: offset\n    }, {\n      $limit: this.pageSize\n    }]\n\n    return this.Model.aggregate(aggregateQuery)\n  }\n\n  /**\n   * Get the content from the database with an id.\n   * @param {!string} id - The id of the content to get.\n   * @param {!Object} projection - The projection for the content.\n   * @returns {Promise<MongooseModel, Error>} - The details of the content.\n   */\n  getContent(id: string, projection?: Object): Promise<any> {\n    return this.Model.findOne({\n      _id: id\n    }, projection)\n  }\n\n  /**\n   * Insert the content into the database.\n   * @param {!Object} obj - The object to insert.\n   * @returns {Promise<MongooseModel, Error>} - The created content.\n   */\n  createContent(obj: Object): Promise<any> {\n    return new this.Model(obj).save()\n  }\n\n  /**\n   * Insert multiple content models into the database.\n   * @param {!Array<Object>} arr - The array of content to insert.\n   * @returns {Promise<Array<MongooseModel>, Error>} - The inserted content.\n   */\n  createMany(arr: Array<Object>): Promise<Array<any>> {\n    return pMap(arr, async obj => {\n      const found = await this.Model.findOne({\n        _id: obj.slug\n      })\n\n      return found\n        ? this.updateContent(obj.slug, obj)\n        : this.createContent(obj)\n    }, {\n      concurrency: 1\n    })\n  }\n\n  /**\n   * Update the content.\n   * @param {!string} id - The id of the content to get.\n   * @param {!Object} obj - The object to update.\n   * @returns {Promise<MongooseModel, Error>} - The updated content.\n   */\n  updateContent(id: string, obj: Object): Promise<any> {\n    return this.Model.findOneAndUpdate({\n      _id: id\n    }, new this.Model(obj), {\n      upsert: true,\n      new: true\n    })\n  }\n\n  /**\n   * Update multiple content models into the database.\n   * @param {!Array<Object>} arr - The array of content to update.\n   * @returns {Promise<Array<MongooseModel>, Error>} - The updated content.\n   */\n  updateMany(arr: Array<Object>): Promise<Array<any>> {\n    return this.createMany(arr)\n  }\n\n  /**\n   * Delete a content model.\n   * @param {!string} id - The id of the content to delete.\n   * @returns {Promise<MongooseModel, Error>} - The deleted content.\n   */\n  deleteContent(id: string): Promise<any> {\n    return this.Model.findOneAndRemove({\n      _id: id\n    })\n  }\n\n  /**\n   * Delete multiple content models from the database.\n   * @param {!Array<Object>} arr - The array of content to delete.\n   * @returns {Promise<Array<MongooseModel>, Error>} - The deleted content.\n   */\n  deleteMany(arr: Array<Object>): Promise<Array<any>> {\n    return pMap(arr, obj => this.deleteContent(obj._id))\n  }\n\n  /**\n   * Get random content.\n   * @returns {Promise<MongooseModel, Error>} - Random content.\n   */\n  getRandomContent(): Promise<any> {\n    return this.Model.aggregate([{\n      $match: this.query\n    }, {\n      $project: this.projection\n    }, {\n      $sample: {\n        size: 1\n      }\n    }, {\n      $limit: 1\n    }]).then(([ res ]) => res)\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/controllers/ContentService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "MongooseModel",
    "externalLink": "https://github.com/Automattic/mongoose",
    "memberof": "src/controllers/ContentService.js",
    "static": true,
    "longname": "src/controllers/ContentService.js~MongooseModel",
    "access": "public",
    "description": "MongoDB object modeling designed to work in an asynchronous environment.",
    "lineNumber": 8
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "ContentService",
    "memberof": "src/controllers/ContentService.js",
    "static": true,
    "longname": "src/controllers/ContentService.js~ContentService",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/controllers/ContentService.js",
    "importStyle": "ContentService",
    "description": "ContentService class for the CRUD operations.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "ContentService"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "Model",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#Model",
    "access": "public",
    "description": "The model of the service. ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "MongooseModel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "pageSize",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#pageSize",
    "access": "public",
    "description": "The maximum items to display per page. ",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "projection",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#projection",
    "access": "public",
    "description": "Simple projection for showing multiple content items. ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "query",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#query",
    "access": "public",
    "description": "The query of the service. ",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#constructor",
    "access": "public",
    "description": "Create a new ContentService.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the content service."
      },
      {
        "nullable": false,
        "types": [
          "MongooseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "options.Model",
        "description": "The model of the service."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.projection",
        "description": "The projection of the service."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.query",
        "description": "The query of the service."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "options.pageSize",
        "description": "The page size of the service."
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getContents",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#getContents",
    "access": "public",
    "description": "Get all the available pages.  ",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<string>, Error>} - A list of pages which are\navailable.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "base",
        "description": "The base of the url to display."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<string>, Error>"
      ],
      "spread": false,
      "description": "A list of pages which are\navailable."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getPage",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#getPage",
    "access": "public",
    "description": "Get content from one page.  ",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<MongooseModel>, Error>} - The content of one page.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "The sort object to sort and order content."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "p",
        "description": "The page to get."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.query",
        "defaultRaw": "this.query",
        "name": "query",
        "description": "A copy of the query object to\nget the objects."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<MongooseModel>, Error>"
      ],
      "spread": false,
      "description": "The content of one page."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "getContent",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#getContent",
    "access": "public",
    "description": "Get the content from the database with an id.  ",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MongooseModel, Error>} - The details of the content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the content to get."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "projection",
        "description": "The projection for the content."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MongooseModel, Error>"
      ],
      "spread": false,
      "description": "The details of the content."
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "createContent",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#createContent",
    "access": "public",
    "description": "Insert the content into the database.  ",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MongooseModel, Error>} - The created content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to insert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MongooseModel, Error>"
      ],
      "spread": false,
      "description": "The created content."
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "createMany",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#createMany",
    "access": "public",
    "description": "Insert multiple content models into the database.  ",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<MongooseModel>, Error>} - The inserted content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array of content to insert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<MongooseModel>, Error>"
      ],
      "spread": false,
      "description": "The inserted content."
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "updateContent",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#updateContent",
    "access": "public",
    "description": "Update the content.  ",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MongooseModel, Error>} - The updated content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the content to get."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to update."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MongooseModel, Error>"
      ],
      "spread": false,
      "description": "The updated content."
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "updateMany",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#updateMany",
    "access": "public",
    "description": "Update multiple content models into the database.  ",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<MongooseModel>, Error>} - The updated content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array of content to update."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<MongooseModel>, Error>"
      ],
      "spread": false,
      "description": "The updated content."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "deleteContent",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#deleteContent",
    "access": "public",
    "description": "Delete a content model.  ",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MongooseModel, Error>} - The deleted content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the content to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MongooseModel, Error>"
      ],
      "spread": false,
      "description": "The deleted content."
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "deleteMany",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#deleteMany",
    "access": "public",
    "description": "Delete multiple content models from the database.  ",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<MongooseModel>, Error>} - The deleted content.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array of content to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<MongooseModel>, Error>"
      ],
      "spread": false,
      "description": "The deleted content."
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getRandomContent",
    "memberof": "src/controllers/ContentService.js~ContentService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentService.js~ContentService#getRandomContent",
    "access": "public",
    "description": "Get random content.  ",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MongooseModel, Error>} - Random content.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MongooseModel, Error>"
      ],
      "spread": false,
      "description": "Random content."
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/controllers/IContentController.js",
    "content": "// Import the necessary modules.\n// @flow\nimport type {\n  $Response,\n  $Request,\n  NextFunction\n} from 'express'\nimport type { MongooseModel } from 'mongoose'\n\nimport IController from './IController'\n\n/** @external {IncomingMessage} https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_incomingmessage */\n/** @external {ServerResponse} https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_serverresponse */\n\n/**\n * Interface for handling the content endpoints.\n * @interface\n * @type {IContentController}\n * @implements {IController}\n */\nexport default class IContentController extends IController {\n\n  /**\n   * Default method to get content pages.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'getContents'.\n   * @returns {Promise<Array<string>, Object>} - A list of pages which are\n   * available.\n   */\n  getContents(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Array<string> | mixed> {\n    throw new Error('Using default method: \\'getContents\\'')\n  }\n\n  /**\n   * Default method to sort the items.\n   * @abstract\n   * @param {!string} sort - The property to sort on.\n   * @param {!number} order - The way to sort the property.\n   * @throws {Error} - Using default method: 'sortContent'\n   * @returns {Object} - The sort object.\n   */\n  sortContent(sort: string, order: number): Object {\n    throw new Error('Using default method: \\'sortContent\\'')\n  }\n\n  /**\n   * Default method to get a page of content.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'getPage'.\n   * @returns {Promise<Array<Object>, Error>} - The content of one page.\n   */\n  getPage(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Array<MongooseModel> | mixed> {\n    throw new Error('Using default method: \\'getPage\\'')\n  }\n\n  /**\n   * Get a content item based on the id.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'getContent'.\n   * @returns {Promise<Object, Error>} - The details of a single content item.\n   */\n  getContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    throw new Error('Using default method: \\'getContent\\'')\n  }\n\n  /**\n   * Create a new content item.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'createContent'.\n   * @returns {Promise<Object, Error>} - The created content item.\n   */\n  createContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    throw new Error('Using default method: \\'createContent\\'')\n  }\n\n  /**\n   * Update the info of one content item.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'updateContent'.\n   * @returns {Promise<Object, Error>} - The updated content item.\n   */\n  updateContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    throw new Error('Using default method: \\'updateContent\\'')\n  }\n\n  /**\n   * Delete a content item.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'deleteContent'.\n   * @returns {Promise<Object, Error>} - The deleted content item\n   */\n  deleteContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    throw new Error('Using default method: \\'deleteContent\\'')\n  }\n\n  /**\n   * Default method to get a random content item.\n   * @abstract\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @throws {Error} - Using default method: 'getRandomContent'.\n   * @returns {Promise<Object, Error>} - A random item.\n   */\n  getRandomContent(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<MongooseModel | mixed> {\n    throw new Error('Using default method: \\'getRandomContent\\'')\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/controllers/IContentController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "IncomingMessage",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_incomingmessage",
    "memberof": "src/controllers/IContentController.js",
    "static": true,
    "longname": "src/controllers/IContentController.js~IncomingMessage",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "ServerResponse",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_serverresponse",
    "memberof": "src/controllers/IContentController.js",
    "static": true,
    "longname": "src/controllers/IContentController.js~ServerResponse",
    "access": "public",
    "description": null
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "IContentController",
    "memberof": "src/controllers/IContentController.js",
    "static": true,
    "longname": "src/controllers/IContentController.js~IContentController",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/controllers/IContentController.js",
    "importStyle": "IContentController",
    "description": "Interface for handling the content endpoints.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "IContentController"
      ],
      "spread": false,
      "description": null
    },
    "interface": true,
    "extends": [
      "src/controllers/IController.js~IController"
    ],
    "implements": [
      "IController"
    ]
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getContents",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#getContents",
    "access": "public",
    "description": "Default method to get content pages.  ",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<string>, Object>} - A list of pages which are\navailable.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<string>, Object>"
      ],
      "spread": false,
      "description": "A list of pages which are\navailable."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getContents'."
      }
    ]
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "sortContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#sortContent",
    "access": "public",
    "description": "Default method to sort the items.  ",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The sort object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "The property to sort on."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "The way to sort the property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The sort object."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'sortContent'"
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getPage",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#getPage",
    "access": "public",
    "description": "Default method to get a page of content.  ",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - The content of one page.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "The content of one page."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getPage'."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#getContent",
    "access": "public",
    "description": "Get a content item based on the id.  ",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The details of a single content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The details of a single content item."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getContent'."
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "createContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#createContent",
    "access": "public",
    "description": "Create a new content item.  ",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The created content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The created content item."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'createContent'."
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "updateContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#updateContent",
    "access": "public",
    "description": "Update the info of one content item.  ",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The updated content item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The updated content item."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'updateContent'."
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "deleteContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#deleteContent",
    "access": "public",
    "description": "Delete a content item.  ",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - The deleted content item  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "The deleted content item"
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'deleteContent'."
      }
    ]
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getRandomContent",
    "memberof": "src/controllers/IContentController.js~IContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IContentController.js~IContentController#getRandomContent",
    "access": "public",
    "description": "Default method to get a random content item.  ",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - A random item.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "A random item."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getRandomContent'."
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/controllers/IController.js",
    "content": "// @flow\n\n/**\n * Interface for the route controllers.\n * @interface\n * @type {IController}\n */\nexport default class IController {\n\n  /**\n   * Default method to register the routes.\n   * @abstract\n   * @param {!Object} router - The router to register the routes to.\n   * @param {!PopApi} PopApi - The PopApi instance.\n   * @throws {Error} - Using default method: 'registerRoutes'\n   * @returns {undefined}\n   */\n  registerRoutes(router: Object, PopApi: any): void {\n    throw new Error('Using default method: \\'registerRoutes\\'')\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/controllers/IController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "IController",
    "memberof": "src/controllers/IController.js",
    "static": true,
    "longname": "src/controllers/IController.js~IController",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/controllers/IController.js",
    "importStyle": "IController",
    "description": "Interface for the route controllers.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "IController"
      ],
      "spread": false,
      "description": null
    },
    "interface": true
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "registerRoutes",
    "memberof": "src/controllers/IController.js~IController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IController.js~IController#registerRoutes",
    "access": "public",
    "description": "Default method to register the routes.  ",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The router to register the routes to."
      },
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'registerRoutes'"
      }
    ]
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/controllers/index.js",
    "content": "// Export the necessary modules.\nexport BaseContentController from './BaseContentController'\nexport ContentService from './ContentService'\nexport IContentController from './IContentController'\nexport IController from './IController'\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/controllers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/helpers/ApiError.js",
    "content": "// Import the necessary modules.\n// @flow\nimport statusCodes from './statusCodes'\n\n/**\n * Error class for the Api.\n * @extends {Error}\n * @type {ApiError}\n */\nexport default class ApiError extends Error {\n\n  /**\n   * The name of the error\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The message of the error\n   * @type {string}\n   */\n  message: string\n\n  /**\n   * The status of the error\n   * @type {string}\n   */\n  status: string\n\n  /**\n   * Whenever the error is public or not.\n   * @type {boolean}\n   */\n  isPublic: boolean\n\n  /**\n   * Whenever the error is operational or not\n   * @type {boolean}\n   */\n  isOperational: boolean\n\n  /**\n   * Create a new ApiError object.\n   * @param {!Object} options - The options for the ApiError.\n   * @param {!string} options.message - The message of the error.\n   * @param {!string} options.status=500 - The status code of the error.\n   * @param {!boolean} options.isPublic=false - Whenever the error is public or\n   * not.\n   */\n  constructor({\n    message,\n    status = statusCodes.INTERNAL_SERVER_ERROR,\n    isPublic = false\n  }: Object): void {\n    super(message)\n\n    /**\n     * The name of the error\n     * @type {string}\n     */\n    this.name = this.constructor.name\n    /**\n     * The message of the error\n     * @type {string}\n     */\n    this.message = message\n    /**\n     * The status of the error\n     * @type {string}\n     */\n    this.status = status\n    /**\n     * Whenever the error is public or not.\n     * @type {boolean}\n     */\n    this.isPublic = isPublic\n    /**\n     * Whenever the error is operational or not\n     * @type {boolean}\n     */\n    this.isOperational = true\n\n    Error.captureStackTrace(this, ApiError)\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/helpers/ApiError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "ApiError",
    "memberof": "src/helpers/ApiError.js",
    "static": true,
    "longname": "src/helpers/ApiError.js~ApiError",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/helpers/ApiError.js",
    "importStyle": "ApiError",
    "description": "Error class for the Api.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "ApiError"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "name",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#name",
    "access": "public",
    "description": "The name of the error ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "message",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#message",
    "access": "public",
    "description": "The message of the error ",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "status",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#status",
    "access": "public",
    "description": "The status of the error ",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "isPublic",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#isPublic",
    "access": "public",
    "description": "Whenever the error is public or not. ",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "isOperational",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#isOperational",
    "access": "public",
    "description": "Whenever the error is operational or not ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/ApiError.js~ApiError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ApiError.js~ApiError#constructor",
    "access": "public",
    "description": "Create a new ApiError object.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the ApiError."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.message",
        "description": "The message of the error."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "options.status",
        "description": "The status code of the error."
      },
      {
        "nullable": false,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.isPublic",
        "description": "Whenever the error is public or\nnot."
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/helpers/index.js",
    "content": "// Import the necessary modules.\nexport ApiError from './ApiError'\nexport statusCodes from './statusCodes'\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/helpers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/helpers/statusCodes.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { STATUS_CODES } from 'http'\n\n/**\n * Swap the key-value pairs from the `http.STATUS_CODES` object.\n * @type {Object}\n */\nconst statusCodes: {\n  [key: string]: number\n} = Object.keys(STATUS_CODES).reduce((acc, current) => {\n  const code = parseInt(current, 10)\n  const message = STATUS_CODES[code]\n    .replace(/'/g, '')\n    .replace(/\\s+/g, '_')\n    .toUpperCase()\n  acc[message] = code\n\n  return acc\n}, {})\n\n/**\n * Export the status codes.\n * @type {Object}\n */\nexport default statusCodes\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/helpers/statusCodes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "statusCodes",
    "memberof": "src/helpers/statusCodes.js",
    "static": true,
    "longname": "src/helpers/statusCodes.js~statusCodes",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/helpers/statusCodes.js",
    "importStyle": "statusCodes",
    "description": "Export the status codes.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/index.js",
    "content": "// Export the necessary modules.\nexport PopApi from './PopApi'\nexport * from './controllers'\nexport * from './helpers'\nexport * from './middleware'\nexport * as utils from './utils'\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/middleware/Cli.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-console */\n/**\n * node.js command-line interfaces made easy\n * @external {Command} https://github.com/tj/commander.js\n */\nimport Command from 'commander'\n\n/**\n * Class The class for the command line interface.\n * @type {Cli}\n */\nexport default class Cli {\n\n  /**\n   * The command line parser to process the Cli inputs.\n   * @type {Command}\n   */\n  program: Object\n\n  /**\n   * The name of the Cli program.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The version of the Cli program.\n   * @type {string}\n   */\n  version: string\n\n  /**\n   * Create a new Cli object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the cli to.\n   * @param {!Object} options - The options for the cli.\n   * @param {?Array<string>} options.argv - The arguments to be parsed by\n   * commander.\n   * @param {!string} options.name - The name of the Cli program.\n   * @param {!string} options.version - The version of the Cli program.\n   * @throw {TypeError} - 'name' and 'version' are required options for the Cli\n   * middleware!\n   */\n  constructor(PopApi: any, {argv, name, version}: Object): void {\n    const { name: debugName } = this.constructor\n    PopApi.debug(`Registering ${debugName} middleware with options: %o`, {\n      argv,\n      name,\n      version\n    })\n\n    if (!name || !version) {\n      throw new TypeError('\\'name\\' and \\'version\\' are required options for the Cli middleware!')\n    }\n\n    /**\n     * The command line parser to process the Cli inputs.\n     * @type {Command}\n     */\n    this.program = Command\n    /**\n     * The name of the Cli program.\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * The version of the Cli program.\n     * @type {string}\n     */\n    this.version = version\n\n    this.initOptions()\n    this.program.on('--help', this.printHelp.bind(this))\n\n    if (argv) {\n      this.run(PopApi, argv)\n    }\n  }\n\n  /**\n   * Initiate the options for the Cli.\n   * @returns {undefined}\n   */\n  initOptions(): void {\n    return this.program.version(`${this.name} v${this.version}`)\n      .option(\n        '-m, --mode <type>',\n        'Run the API in a particular mode.',\n        /^(pretty|quiet|ugly)$/i\n      )\n  }\n\n  /**\n   * Get the help message.\n   * @returns {Array<string>} - The help message to print.\n   */\n  getHelp(): Array<string> {\n    return [\n      '',\n      '  Examples:',\n      '',\n      `    $ ${this.name} -m <pretty|quiet|ugly>`,\n      `    $ ${this.name} --mode <pretty|quiet|ugly>`\n    ]\n  }\n\n  /**\n   * Method for displaying the --help option\n   * @returns {undefined}\n   */\n  printHelp(): void {\n    console.info(`${this.getHelp().join('\\n')}\\n`)\n  }\n\n  /**\n   * Handle the --mode Cli option.\n   * @param {?string} [m] - The mode to run the API in.\n   * @returns {Object} - The options to pass to the Logger middleware.\n   */\n  mode(m?: string): Object {\n    const testing = process.env.NODE_ENV === 'test'\n\n    switch (m) {\n      case 'quiet':\n        return {\n          pretty: false,\n          quiet: true\n        }\n      case 'ugly':\n        return {\n          pretty: false,\n          quiet: testing\n        }\n      case 'pretty':\n      default:\n        return {\n          pretty: !testing,\n          quiet: testing\n        }\n    }\n  }\n\n  /**\n   * Run the Cli program.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the logger to.\n   * @param {?Array<string>} argv - The arguments to be parsed by commander.\n   * @returns {undefined}\n   */\n  run(PopApi: any, argv?: Array<string>): void {\n    if (argv) {\n      this.program.parse(argv)\n    }\n\n    if (this.program.mode) {\n      PopApi.loggerArgs = this.mode(this.program.mode)\n    } else {\n      console.error('\\n  error: no valid command given, please check below:')\n      return this.program.help()\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/Cli.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "Command",
    "externalLink": "https://github.com/tj/commander.js",
    "memberof": "src/middleware/Cli.js",
    "static": true,
    "longname": "src/middleware/Cli.js~Command",
    "access": "public",
    "description": "node.js command-line interfaces made easy",
    "lineNumber": 8
  },
  {
    "__docId__": 133,
    "kind": "class",
    "name": "Cli",
    "memberof": "src/middleware/Cli.js",
    "static": true,
    "longname": "src/middleware/Cli.js~Cli",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/Cli.js",
    "importStyle": "Cli",
    "description": "Class The class for the command line interface.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Cli"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "program",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#program",
    "access": "public",
    "description": "The command line parser to process the Cli inputs. ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "name",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#name",
    "access": "public",
    "description": "The name of the Cli program. ",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "version",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#version",
    "access": "public",
    "description": "The version of the Cli program. ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#constructor",
    "access": "public",
    "description": "Create a new Cli object.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{TypeError} - 'name' and 'version' are required options for the Cli\nmiddleware!"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the cli to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the cli."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.argv",
        "description": "The arguments to be parsed by\ncommander."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "The name of the Cli program."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.version",
        "description": "The version of the Cli program."
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "initOptions",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#initOptions",
    "access": "public",
    "description": "Initiate the options for the Cli.  ",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getHelp",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#getHelp",
    "access": "public",
    "description": "Get the help message.  ",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<string>} - The help message to print.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": "The help message to print."
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "printHelp",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#printHelp",
    "access": "public",
    "description": "Method for displaying the --help option  ",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "mode",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#mode",
    "access": "public",
    "description": "Handle the --mode Cli option.  ",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The options to pass to the Logger middleware.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "m",
        "description": "The mode to run the API in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The options to pass to the Logger middleware."
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "run",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#run",
    "access": "public",
    "description": "Run the Cli program.  ",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the logger to."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "The arguments to be parsed by commander."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/middleware/Database.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\nimport { existsSync } from 'fs'\nimport {\n  isAbsolute,\n  join\n} from 'path'\nimport { URL } from 'url'\n\nimport { executeCommand } from '../utils'\n\n/**\n * Class for setting up a database connection.\n * @type {Database}\n */\nexport default class Database {\n\n  /**\n   * The name of the database. Default is the package name with the\n   * environment mode.\n   * @type {string}\n   */\n  database: string\n\n  /**\n   * The host of the server of the database. Default is `['localhost']`.\n   * @type {Array<string>}\n   */\n  hosts: Array<string>\n\n  /**\n   * The port of the database. Default is `27017`.\n   * @type {string}\n   */\n  dbPort: number\n\n  /**\n   * The username of the database. By default this is left empty.\n   * @type {string}\n   */\n  username: string\n\n  /**\n   * The password of the database. By default this is left empty.\n   * @type {string}\n   */\n  password: string\n\n  /**\n   * Create a new Database object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the database to.\n   * @param {!Object} options - The options for the database.\n   * @param {!string} options.database - The arguments to be parsed by\n   * @param {!Array<string>} [options.hosts=['localhost']] - The hosts for the\n   * database connection.\n   * @param {!number} [options.dbPort=27017] - The port for the database\n   * connection.\n   * @param {?string} [options.username] - The username for the database\n   * connection.\n   * @param {?string} [options.password] - The password for the database\n   * connection.\n   * @throws {TypeError} - 'database' is a required option for the Database\n   * middleware!\n   */\n  constructor(PopApi: any, {\n    database,\n    hosts = ['localhost'],\n    dbPort = 27017,\n    username,\n    password\n  }: Object): void {\n    const { name: debugName } = this.constructor\n    PopApi.debug(`Registering ${debugName} middleware with options: %o`, {\n      database,\n      hosts,\n      dbPort,\n      username,\n      password\n    })\n\n    if (!database) {\n      throw new TypeError('\\'database\\' is a required option for the Database middleware!')\n    }\n\n    process.env.NODE_ENV = process.env.NODE_ENV || 'development'\n\n    const {\n      MONGO_PORT_27017_TCP_ADDR,\n      MONGO_PORT_27017_TCP_PORT,\n      NODE_ENV\n    } = process.env\n\n    this.database = `${database}-${NODE_ENV}`\n    this.hosts = MONGO_PORT_27017_TCP_ADDR\n      ? [MONGO_PORT_27017_TCP_ADDR]\n      : hosts\n    this.dbPort = Number(MONGO_PORT_27017_TCP_PORT) || dbPort\n    this.username = username || ''\n    this.password = password || ''\n\n    PopApi.database = this\n  }\n\n  /**\n   * Connection and configuration of the database.\n   * @returns {Promise<undefined, Error>} - The promise to connect to the\n   * database.\n   */\n  connect(): Promise<void> {\n    if (process.env.MONGODB_URI) {\n      const uri = new URL(process.env.MONGODB_URI)\n      return mongoose.connect(uri.href)\n    }\n    const uri = new URL(`mongodb://${this.username}:${this.password}@${this.hosts.join(',')}:${this.dbPort}/${this.database}`)\n    return mongoose.connect(uri.href)\n  }\n\n  /**\n   * Disconnect from the database.\n   * @returns {Promise<undefined, Error>} - The promise to disconnect from\n   * the database.\n   */\n  disconnect(): Promise<void> {\n    return mongoose.disconnect()\n  }\n\n  /**\n   * Export a JSON file collection.\n   * @param {!string} collection - The collection to export.\n   * @param {!string} outputFile - The path of the output file of the export.\n   * @returns {Promise<string, undefined>} - The promise to export a\n   * collection.\n   */\n  exportFile(\n    collection: string,\n    outputFile: string\n  ): Promise<string | void> {\n    return executeCommand('mongoexport', [\n      '-d', this.database,\n      '-c', `${collection}s`,\n      '-o', outputFile\n    ])\n  }\n\n  /**\n   * Import a JSON file collection.\n   * @param {!string} collection - The collection to import.\n   * @param {!string} jsonFile - The JSON file to import.\n   * @returns {Promise<string, undefined>} - The promise to import a\n   * collection.\n   */\n  importFile(\n    collection: string,\n    jsonFile: string\n  ): Promise<string | void> {\n    const file = !isAbsolute(jsonFile)\n      ? jsonFile\n      : join(...[__dirname, '..', '..', jsonFile])\n\n    if (!existsSync(file)) {\n      const err = new Error(`no such file found for '${file}'`)\n      return Promise.reject(err)\n    }\n\n    return executeCommand('mongoimport', [\n      '-d', this.database,\n      '-c', `${collection}s`,\n      '--file', jsonFile,\n      '--upsert'\n    ])\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "Database",
    "memberof": "src/middleware/Database.js",
    "static": true,
    "longname": "src/middleware/Database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/Database.js",
    "importStyle": "Database",
    "description": "Class for setting up a database connection.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "database",
    "memberof": "src/middleware/Database.js~Database",
    "static": false,
    "longname": "src/middleware/Database.js~Database#database",
    "access": "public",
    "description": "The name of the database. Default is the package name with the\nenvironment mode. ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "hosts",
    "memberof": "src/middleware/Database.js~Database",
    "static": false,
    "longname": "src/middleware/Database.js~Database#hosts",
    "access": "public",
    "description": "The host of the server of the database. Default is `['localhost']`. ",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "dbPort",
    "memberof": "src/middleware/Database.js~Database",
    "static": false,
    "longname": "src/middleware/Database.js~Database#dbPort",
    "access": "public",
    "description": "The port of the database. Default is `27017`. ",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "username",
    "memberof": "src/middleware/Database.js~Database",
    "static": false,
    "longname": "src/middleware/Database.js~Database#username",
    "access": "public",
    "description": "The username of the database. By default this is left empty. ",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "password",
    "memberof": "src/middleware/Database.js~Database",
    "static": false,
    "longname": "src/middleware/Database.js~Database#password",
    "access": "public",
    "description": "The password of the database. By default this is left empty. ",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Database.js~Database#constructor",
    "access": "public",
    "description": "Create a new Database object.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the database to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the database."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.database",
        "description": "The arguments to be parsed by"
      },
      {
        "nullable": false,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['localhost']",
        "defaultRaw": "['localhost']",
        "name": "options.hosts",
        "description": "The hosts for the\ndatabase connection."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "27017",
        "defaultRaw": 27017,
        "name": "options.dbPort",
        "description": "The port for the database\nconnection."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.username",
        "description": "The username for the database\nconnection."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.password",
        "description": "The password for the database\nconnection."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "'database' is a required option for the Database\nmiddleware!"
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "connect",
    "memberof": "src/middleware/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Database.js~Database#connect",
    "access": "public",
    "description": "Connection and configuration of the database.  ",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<undefined, Error>} - The promise to connect to the\ndatabase.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "The promise to connect to the\ndatabase."
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/middleware/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Database.js~Database#disconnect",
    "access": "public",
    "description": "Disconnect from the database.  ",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<undefined, Error>} - The promise to disconnect from\nthe database.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined, Error>"
      ],
      "spread": false,
      "description": "The promise to disconnect from\nthe database."
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "exportFile",
    "memberof": "src/middleware/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Database.js~Database#exportFile",
    "access": "public",
    "description": "Export a JSON file collection.  ",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, undefined>} - The promise to export a\ncollection.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The collection to export."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "outputFile",
        "description": "The path of the output file of the export."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, undefined>"
      ],
      "spread": false,
      "description": "The promise to export a\ncollection."
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "importFile",
    "memberof": "src/middleware/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Database.js~Database#importFile",
    "access": "public",
    "description": "Import a JSON file collection.  ",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, undefined>} - The promise to import a\ncollection.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The collection to import."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonFile",
        "description": "The JSON file to import."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, undefined>"
      ],
      "spread": false,
      "description": "The promise to import a\ncollection."
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/middleware/HttpServer.js",
    "content": "// Import the necessary modules.\n// @flow\nimport cluster from 'cluster'\n/** @external {http~Server} https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_server */\nimport http from 'http'\nimport { cpus } from 'os'\n\nimport type Database from './Database'\n\n/**\n * Class for starting the API.\n * @type {Server}\n */\nexport default class HttpServer {\n\n  /**\n   * the http server object.\n   * @type {http~Server}\n   * @see https://nodejs.org/api/http.html#http_http_createserver_requestlistener\n   */\n  server: Server\n\n  /**\n   * The port on which the API will run on. Default is `5000`.\n   * @type {number}\n   */\n  serverPort: number\n\n  /**\n   * The amount of workers on the cluster.\n   * @type {number}\n   */\n  workers: number\n\n  /**\n   * Create a new Server object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the server to.\n   * @param {!Object} options - The options for the server.\n   * @param {!Express} options.app - The application instance to create a\n   * server for.\n   * @param {!number} [options.serverPort=process.env.PORT] - The port the API\n   * will run on.\n   * @param {!number} [options.workers=2] - The amount of workers to fork.\n   * @throws {TypeError} - 'app' is a required option for the HttpServer\n   * middleware!\n   */\n  constructor(PopApi: any, {\n    app,\n    serverPort = process.env.PORT || 5000,\n    workers = 2\n  }: Object): void {\n    const { name: debugName } = this.constructor\n    PopApi.debug(`Registering ${debugName} middleware with options: %o`, {\n      serverPort,\n      workers\n    })\n\n    if (!app) {\n      throw new TypeError('\\'app\\' is a required option for the HttpServer middleware!')\n    }\n\n    /**\n     * The amount of workers on the cluster.\n     * @type {number}\n     */\n    this.server = typeof app === 'function' ? http.createServer(app) : app\n    /**\n     * The port on which the API will run on. Default is `5000`.\n     * @type {number}\n     */\n    this.serverPort = serverPort\n    /**\n     * The amount of workers on the cluster.\n     * @type {number}\n     */\n    this.workers = workers\n    this.setupApi(app)\n\n    PopApi.server = this\n  }\n\n  /**\n   * For the workers.\n   * @returns {undefined}\n   */\n  forkWorkers(): void {\n    for (let i = 0; i < Math.min(cpus().length, this.workers); i++) {\n      cluster.fork()\n    }\n  }\n\n  /**\n   * Handle the errors for workers.\n   * @returns {undefined}\n   */\n  workersOnExit(): void {\n    cluster.on('exit', ({ process }) => {\n      const msg = `Worker '${process.pid}' died, spinning up another!`\n      logger.error(msg)\n\n      cluster.fork()\n    })\n  }\n\n  /**\n   * Method to setup the cron job.\n   * @param {!Express} app - The application instance to create a server for.\n   * @returns {undefined}\n   */\n  setupApi(app: Object): void {\n    if (cluster.isWorker || this.workers === 0) {\n      this.server = app.listen(this.serverPort)\n    }\n\n    if (cluster.isMaster || this.workers === 0) {\n      this.forkWorkers()\n      this.workersOnExit()\n\n      logger.info(`API started on port: ${this.serverPort}`)\n    }\n  }\n\n  /**\n   * Method to stop the API from running.\n   * @param {!Database} database - The database connection to close.\n   * @param {?Function} [done=() => {}] - Function to exit the API.\n   * @returns {undefined}\n   */\n  closeApi(database: Database, done: Function = () => {}): void {\n    this.server.close(() => {\n      database.disconnect().then(() => {\n        logger.info('Closed out remaining connections.')\n        done()\n      })\n    })\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/HttpServer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "external",
    "name": "http~Server",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_server",
    "memberof": "src/middleware/HttpServer.js",
    "static": true,
    "longname": "src/middleware/HttpServer.js~http~Server",
    "access": "public",
    "description": null,
    "lineNumber": 5
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "HttpServer",
    "memberof": "src/middleware/HttpServer.js",
    "static": true,
    "longname": "src/middleware/HttpServer.js~HttpServer",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/HttpServer.js",
    "importStyle": "HttpServer",
    "description": "Class for starting the API.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "server",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#server",
    "access": "public",
    "description": "the http server object. ",
    "see": [
      "https://nodejs.org/api/http.html#http_http_createserver_requestlistener "
    ],
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "serverPort",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#serverPort",
    "access": "public",
    "description": "The port on which the API will run on. Default is `5000`. ",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "workers",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#workers",
    "access": "public",
    "description": "The amount of workers on the cluster. ",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#constructor",
    "access": "public",
    "description": "Create a new Server object.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the server to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the server."
      },
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "options.app",
        "description": "The application instance to create a\nserver for."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.env.PORT",
        "defaultRaw": "process.env.PORT",
        "name": "options.serverPort",
        "description": "The port the API\nwill run on."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.workers",
        "description": "The amount of workers to fork."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "'app' is a required option for the HttpServer\nmiddleware!"
      }
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "forkWorkers",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#forkWorkers",
    "access": "public",
    "description": "For the workers.  ",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "workersOnExit",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#workersOnExit",
    "access": "public",
    "description": "Handle the errors for workers.  ",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "setupApi",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#setupApi",
    "access": "public",
    "description": "Method to setup the cron job.  ",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The application instance to create a server for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "closeApi",
    "memberof": "src/middleware/HttpServer.js~HttpServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/HttpServer.js~HttpServer#closeApi",
    "access": "public",
    "description": "Method to stop the API from running.  ",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Database"
        ],
        "spread": false,
        "optional": false,
        "name": "database",
        "description": "The database connection to close."
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "done",
        "description": "Function to exit the API."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/middleware/Logger.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { join } from 'path'\n/**\n * express.js middleware for winstonjs\n * @external {ExpressWinston} https://github.com/bithavoc/express-winston\n */\nimport {\n  logger as httpLogger,\n  requestWhitelist,\n  responseWhitelist\n} from '@chrisalderson/express-winston'\nimport type { Middleware } from 'express'\n/**\n * a multi-transport async logging library for node.js\n * @external {Winston} https://github.com/winstonjs/winston\n */\nimport {\n  type createLogger as Winston,\n  loggers,\n  format,\n  transports\n} from 'winston'\n\nimport { padStart } from './internal'\n\n/**\n * Class for setting up the logger.\n * @type {Logger}\n */\nexport default class Logger {\n\n  /**\n   * The file transport for the logger.\n   * @type {Object}\n   */\n  static fileTransport: Object\n\n  /**\r\n   * The log levels the logger middleware will be using.\r\n   * @type {Object}\r\n   */\r\n  levels: Object\n\n  /**\n   * The name of the log file.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The directory where the log file will be stored.\n   * @type {string}\n   */\n  logDir: string\n\n  /**\r\n   * Create a new Logger object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the logger to.\n   * @param {!Object} options - The options for the logger.\n   * @param {!string} options.name - The name of the log file.\n   * @param {?boolean} [options.pretty] - Pretty mode for output with colors.\r\n   * @param {?boolean} [options.quiet] - No output.\n   * @throws {TypeError} - 'name' and 'logDir' are required options for the\n   * Logger middleware!\n   */\n  constructor(PopApi: any, {name, logDir, pretty, quiet}: Object): void {\n    const { name: debugName } = this.constructor\n    PopApi.debug(`Registering ${debugName} middleware with options: %o`, {\n      name,\n      logDir,\n      pretty,\n      quiet\n    })\n\n    if (!name || !logDir) {\n      throw new TypeError('\\'name\\' and \\'logDir\\' are required options for the Logger middleware!')\n    }\n\n    /**\r\n     * The log levels the logger middleware will be using.\r\n     * @type {Object}\r\n     */\r\n    this.levels = {\n      error: 0,\r\n      warn: 1,\r\n      info: 2,\r\n      debug: 3\r\n    }\n    /**\n     * The name of the log file.\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * The directory where the log file will be stored.\n     * @type {string}\n     */\n    this.logDir = logDir\n\n    // Apply the polyfill if necessary.\n    // @flow-ignore\n    String.prototype.padStart = String.prototype.padStart || padStart // eslint-disable-line no-extend-native\n\n    global.logger = this.getLogger('logger', pretty, quiet)\n    if (process.env.NODE_ENV !== 'test') {\n      PopApi.httpLogger = this.getLogger('http', pretty, quiet)\n    }\n  }\n\r\n  /**\r\n   * Get the color of the output based on the log level.\r\n   * @param {?string} [level=info] - The log level.\n   * @returns {string} - A color based on the log level.\r\n   */\r\n  getLevelColor(level: string = 'info'): string {\n    const colors = {\n      error: '\\x1b[31m',\r\n      warn: '\\x1b[33m',\r\n      info: '\\x1b[36m',\r\n      debug: '\\x1b[34m'\r\n    }\n\r\n    return colors[level]\n  }\r\n\r\n  /**\n   * Update the message property and add the splat property to the info\n   * object for interpolation.\n   * @param {Object} info - The info object processed by logform.\n   * @returns {Object} - The info object with the modified message and splat\n   * property.\n   */\n  prettyPrintConsole(info: Object): Object {\n    const { level, message, timestamp } = info\r\n    const c = this.getLevelColor(level)\r\n\n    info.splat = [\n      timestamp,\n      level.toUpperCase().padStart(5),\n      this.name.padStart(2),\n      process.pid,\n      message\n    ]\n    info.message = `\\x1b[0m[%s] ${c}%s:\\x1b[0m %s/%d: \\x1b[36m%s\\x1b[0m`\r\n\n    return info\n  }\n\n  /**\n   * Get the message string from the info object.\n   * @param {Object} info - The info object processed by logform.\n   * @returns {string} - The message string to print out of the info object.\n   */\n  _getMessage(info: Object): string {\n    return info.message\n  }\n\n  /**\r\n   * Formatter method which formats the output to the console.\r\n   * @returns {Object} - The formatter for the console transport.\r\n   */\r\n  consoleFormatter(): Object {\n    return format.combine(\n      format.timestamp(),\n      format.printf(this.prettyPrintConsole.bind(this)),\n      format.splat(),\n      format.printf(this._getMessage)\n    )\n  }\r\n\r\n  /**\r\n   * Formatter method which formats the output to the log file.\r\n   * @returns {Object} - The formatter for the file transport.\r\n   */\r\n  fileFormatter(): Object {\r\n    return format.combine(\n      format.timestamp(),\n      format.printf(info => {\n        Object.assign(info, {\r\n          name: this.name,\n          pid: process.pid\r\n        })\r\n        return info\n      }),\n      format.json()\n    )\n  }\r\n\n  /**\r\n   * Create a Console transport.\r\n   * @param {?boolean} [pretty] - Pretty mode for output with colors.\r\n   * @returns {Object} - A configured Console transport.\r\n   */\r\n  getConsoleTransport(pretty?: boolean): Object {\n    const f = pretty\n      ? this.consoleFormatter()\n      : format.simple()\n\n    return new transports.Console({\n      name: this.name,\n      format: f\n    })\n  }\n\n  /**\n   * Create a File transport.\n   * @param {!string} file - The file to log the output to.\n   * @returns {Object} - A configured File transport.\n   */\n  getFileTransport(file: string): Object {\n    if (!Logger.fileTransport) {\n      Logger.fileTransport = new transports.File({\n        level: 'warn',\n        filename: join(...[\n          this.logDir,\n          `${file}.log`\n        ]),\n        format: this.fileFormatter(),\r\n        maxsize: 5242880,\n        handleExceptions: true\r\n      })\n    }\n\n    return Logger.fileTransport\n  }\n\n  /**\r\n   * Create a logger instance.\r\n   * @param {!string} suffix - The suffix for the log file.\n   * @param {?boolean} [pretty] - Pretty mode for output with colors.\r\n   * @returns {Winston} - A configured logger instance.\r\n   */\r\n  createLoggerInstance(suffix: string, pretty?: boolean): Winston {\n    const id = `${this.name}-${suffix}`\n\n    return loggers.add(id, {\n      levels: this.levels,\n      level: 'debug',\n      exitOnError: false,\n      transports: [\n        this.getConsoleTransport(pretty),\n        this.getFileTransport(id)\n      ]\n    })\n  }\n\n  /**\n   * Get the log message for Http logger.\n   * @param {!Object} req - The request object to log.\n   * @param {!Object} res - The response object to log.\n   * @returns {string} - The HtpP log message to print.\n   */\n  getHttpLoggerMessage(req: $Response, res: $Response): string {\n    return `HTTP ${req.method} ${req.url} ${res.statusCode} ${res.responseTime}ms`\n  }\n\n  /**\r\n   * Create a Http logger instance.\r\n   * @param {?boolean} [pretty] - Pretty mode for output with colors.\r\n   * @returns {ExpressWinston} - A configured Http logger instance.\r\n   */\r\n  createHttpLogger(pretty?: boolean): Middleware {\r\n    const logger = this.createLoggerInstance('http', pretty)\n    const options: {\n      [key: string]: mixed\n    } = {\n      winstonInstance: logger,\n      meta: true,\n      msg: this.getHttpLoggerMessage,\n      statusLevels: true\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      const { Console } = transports\n      logger.add(new Console({\n        name: this.name,\n        format: format.json({\n          space: 2\n        })\n      }))\n\n      options.requestWhitelist = [].concat(requestWhitelist, 'body')\n      options.responseWhitelist = [].concat(responseWhitelist, 'body')\n    }\n\n    return httpLogger(options)\r\n  }\r\n\r\n  /**\r\n   * Method to create a global logger object based on the properties of the\r\n   * Logger class.\r\n   * @param {?boolean} [pretty] - Pretty mode for output with colors.\r\n   * @param {?boolean} [quiet] - No output.\r\n   * @returns {Object|Winston} - A configured logger.\n   */\r\n  createLogger(pretty?: boolean, quiet?: boolean): Object | Winston {\n    const logger = this.createLoggerInstance('app', pretty)\n\n    if (quiet) {\n      Object.keys(this.levels).map(level => {\r\n        logger[level] = () => {}\n      })\r\n    }\n\n    return logger\n  }\n\n  /**\r\n   * Get a logger object based on the choice.\r\n   * @param {?string} [type] - The choice for the logger object.\n   * @param {?boolean} [pretty] - Pretty mode for output with colors.\r\n   * @param {?boolean} [quiet] - No output.\r\n   * @returns {Middleware|Winston|undefined} - The logger object.\n   */\r\n  getLogger(\n    type?: string,\n    pretty?: boolean,\n    quiet?: boolean\n  ): Middleware | Winston | void {\n    if (!type) {\n      return undefined\n    }\r\n\n    const t = type.toUpperCase()\n\n    switch (t) {\r\n      case 'HTTP':\r\n        return this.createHttpLogger(pretty)\n      case 'LOGGER':\r\n        return this.createLogger(pretty, quiet)\r\n      default:\r\n        return undefined\n    }\r\n  }\n\n}\r\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/Logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "external",
    "name": "ExpressWinston",
    "externalLink": "https://github.com/bithavoc/express-winston",
    "memberof": "src/middleware/Logger.js",
    "static": true,
    "longname": "src/middleware/Logger.js~ExpressWinston",
    "access": "public",
    "description": "express.js middleware for winstonjs",
    "lineNumber": 8
  },
  {
    "__docId__": 180,
    "kind": "external",
    "name": "Winston",
    "externalLink": "https://github.com/winstonjs/winston",
    "memberof": "src/middleware/Logger.js",
    "static": true,
    "longname": "src/middleware/Logger.js~Winston",
    "access": "public",
    "description": "a multi-transport async logging library for node.js",
    "lineNumber": 18
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/middleware/Logger.js",
    "static": true,
    "longname": "src/middleware/Logger.js~Logger",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/Logger.js",
    "importStyle": "Logger",
    "description": "Class for setting up the logger.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "fileTransport",
    "memberof": "src/middleware/Logger.js~Logger",
    "static": true,
    "longname": "src/middleware/Logger.js~Logger.fileTransport",
    "access": "public",
    "description": "The file transport for the logger. ",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "levels",
    "memberof": "src/middleware/Logger.js~Logger",
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#levels",
    "access": "public",
    "description": "The log levels the logger middleware will be using. ",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "name",
    "memberof": "src/middleware/Logger.js~Logger",
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#name",
    "access": "public",
    "description": "The name of the log file. ",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "logDir",
    "memberof": "src/middleware/Logger.js~Logger",
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#logDir",
    "access": "public",
    "description": "The directory where the log file will be stored. ",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#constructor",
    "access": "public",
    "description": "Create a new Logger object.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the logger to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the logger."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "The name of the log file."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.pretty",
        "description": "Pretty mode for output with colors."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.quiet",
        "description": "No output."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "'name' and 'logDir' are required options for the\nLogger middleware!"
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getLevelColor",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#getLevelColor",
    "access": "public",
    "description": "Get the color of the output based on the log level.  ",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - A color based on the log level.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "info",
        "defaultRaw": "info",
        "name": "level",
        "description": "The log level."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A color based on the log level."
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "prettyPrintConsole",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#prettyPrintConsole",
    "access": "public",
    "description": "Update the message property and add the splat property to the info\nobject for interpolation.  ",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The info object with the modified message and splat\nproperty.  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The info object processed by logform."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The info object with the modified message and splat\nproperty."
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "_getMessage",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#_getMessage",
    "access": "private",
    "description": "Get the message string from the info object.  ",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - The message string to print out of the info object.  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The info object processed by logform."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The message string to print out of the info object."
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "consoleFormatter",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#consoleFormatter",
    "access": "public",
    "description": "Formatter method which formats the output to the console.  ",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The formatter for the console transport.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The formatter for the console transport."
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "fileFormatter",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#fileFormatter",
    "access": "public",
    "description": "Formatter method which formats the output to the log file.  ",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The formatter for the file transport.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The formatter for the file transport."
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getConsoleTransport",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#getConsoleTransport",
    "access": "public",
    "description": "Create a Console transport.  ",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - A configured Console transport.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Pretty mode for output with colors."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A configured Console transport."
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getFileTransport",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#getFileTransport",
    "access": "public",
    "description": "Create a File transport.  ",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - A configured File transport.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to log the output to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A configured File transport."
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "createLoggerInstance",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#createLoggerInstance",
    "access": "public",
    "description": "Create a logger instance.  ",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Winston} - A configured logger instance.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": "The suffix for the log file."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Pretty mode for output with colors."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Winston"
      ],
      "spread": false,
      "description": "A configured logger instance."
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getHttpLoggerMessage",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#getHttpLoggerMessage",
    "access": "public",
    "description": "Get the log message for Http logger.  ",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - The HtpP log message to print.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request object to log."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response object to log."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The HtpP log message to print."
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "createHttpLogger",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#createHttpLogger",
    "access": "public",
    "description": "Create a Http logger instance.  ",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExpressWinston} - A configured Http logger instance.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Pretty mode for output with colors."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressWinston"
      ],
      "spread": false,
      "description": "A configured Http logger instance."
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "createLogger",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#createLogger",
    "access": "public",
    "description": "Method to create a global logger object based on the properties of the\nLogger class.  ",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Winston} - A configured logger.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Pretty mode for output with colors."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "quiet",
        "description": "No output."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Winston"
      ],
      "spread": false,
      "description": "A configured logger."
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getLogger",
    "memberof": "src/middleware/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Logger.js~Logger#getLogger",
    "access": "public",
    "description": "Get a logger object based on the choice.  ",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Middleware|Winston|undefined} - The logger object.  "
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "The choice for the logger object."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Pretty mode for output with colors."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "quiet",
        "description": "No output."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware",
        "Winston",
        "undefined"
      ],
      "spread": false,
      "description": "The logger object."
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/middleware/Routes.js",
    "content": "// Import the necessary modules.\n// @flow\nimport bodyParser from 'body-parser'\nimport compress from 'compression'\nimport helmet from 'helmet'\nimport type {\n  $Application,\n  $Request,\n  $Response,\n  NextFunction\n} from 'express'\nimport responseTime from 'response-time'\nimport { STATUS_CODES as statusMessages } from 'http'\n\nimport {\n  ApiError,\n  statusCodes\n} from '../helpers'\n\n/**\n * Class for setting up the Routes.\n * @type {Routes}\n */\nexport default class Routes {\n\n  /**\n   * Create a new Routes object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the routes to.\n   * @param {!Object} options - The options for the routes.\n   * @param {!Express} options.app - The application instance to add middleware\n   * and bind the routes to.\n   * @param {?Array<Object>} options.controllers - The controllers to register.\n   * @throws {TypeError} - 'app' are required options for the routes\n   * middleware!\n   */\n  constructor(PopApi: any, {app, controllers}: Object): void {\n    const { name: debugName } = this.constructor\n    PopApi.debug(`Registering ${debugName} middleware with options: %o`, {\n      controllers\n    })\n\n    if (!app) {\n      throw new TypeError('\\'app\\' is a required option for the Routes middleware!')\n    }\n\n    this.setupRoutes(app, PopApi, controllers)\n  }\n\n  /**\n   * Register the controllers found in the controllers directory.\n   * @param {!Express} app - The application instance to register the routers\n   * to.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the routes to.\n   * @param {!Array<Object>} controllers - The controllers to register.\n   * @returns {undefined}\n   */\n  registerControllers(\n    app: $Application,\n    PopApi: any,\n    controllers: Array<Object>\n  ): void {\n    controllers.forEach(c => {\n      const { Controller, args } = c\n      const controller = new Controller(args)\n\n      PopApi.debug(`Registering ${Controller.name} route controller`)\n      controller.registerRoutes(app, PopApi)\n    })\n  }\n\n  /**\n   * Convert the thrown errors to an instance of ApiError.\n   * @param {!Error} err - The caught error.\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {ApiError} - The converted error.\n   */\n  convertErrors(\n    err: Error,\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): mixed {\n    if (!(err instanceof ApiError)) {\n      const error = new ApiError({\n        message: err.message\n      })\n      return next(error)\n    }\n\n    return next(err)\n  }\n\n  /**\n   * Catch the 404 errors.\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {ApiError} - A standard 404 error.\n   */\n  setNotFoundHandler(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): mixed {\n    const err = new ApiError({\n      message: 'Api not found',\n      status: statusCodes.NOT_FOUND\n    })\n\n    return next(err)\n  }\n\n  /**\n   * Error handler middleware\n   * @param {!ApiError} err - The caught error.\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {Object} - The error object.\n   */\n  setErrorHandler(\n    err: ApiError,\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Object {\n    const { status } = err\n    const body: {\n      [key: string]: string\n    } = {\n      message: err.isPublic\n        ? err.message\n        : `${status} ${statusMessages[status]}`\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      body.stack = err.stack\n    }\n\n    res.setHeader('Content-Type', 'application/json')\n    res.status(status)\n    return res.send(body)\n  }\n\n  /**\n   * Remove security sensitive headers.\n   * @see https://github.com/shieldfy/API-Security-Checklist#output\n   * @param {!IncomingMessage} req - The incoming message request object.\n   * @param {!ServerResponse} res - The server response object.\n   * @param {!Function} next - The next function to move to the next\n   * middleware.\n   * @returns {undefined}\n   */\n  removeServerHeader(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): mixed {\n    res.removeHeader('Server')\n    return next()\n  }\n\n  /**\n   * Hook method for setting up middleware pre setting up the routes.\n   * @param {!Express} app - The application instance to add middleware to.\n   * @returns {undefined}\n   */\n  preRoutes(app: $Application): void {\n    // Enable parsing URL encoded bodies.\n    app.use(bodyParser.urlencoded({\n      extended: true\n    }))\n\n    // Enable parsing JSON bodies.\n    app.use(bodyParser.json())\n\n    // Enables compression of response bodies.\n    app.use(compress({\n      threshold: 1400,\n      level: 4,\n      memLevel: 3\n    }))\n\n    // Enable response time tracking for HTTP request.\n    app.use(responseTime())\n\n    // Set and remove the security sensitive headers.\n    app.use(helmet())\n    app.use(helmet.contentSecurityPolicy({\n      directives: {\n        defaultSrc: ['\\'none\\'']\n      }\n    }))\n    app.use(this.removeServerHeader)\n  }\n\n  /**\n   * Hook method for setting up middleware post setting up the routes.\n   * @param {!Express} app - The application instance to add middleware to.\n   * @returns {undefined}\n   */\n  postRoutes(app: $Application): void {\n    // Convert the caught errors to the ApiError instance.\n    app.use(this.convertErrors)\n\n    // Set the default not found handling middleware.\n    app.use(this.setNotFoundHandler)\n\n    // Set the default error handling middleware.\n    app.use(this.setErrorHandler)\n  }\n\n  /**\n   * Setup the application service.\n   * @param {!Express} app - The application instance to add middleware and\n   * bind the routes to.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the routes to.\n   * @param {?Array<Object>} [controllers] - The controllers to register.\n   * @returns {undefined}\n   */\n  setupRoutes(\n    app: $Application,\n    PopApi?: any,\n    controllers?: Array<Object>\n  ): void {\n    // Pre routes hook.\n    this.preRoutes(app)\n\n    // Enable HTTP request logging.\n    if (PopApi && PopApi.httpLogger) {\n      app.use(PopApi.httpLogger)\n    }\n\n    // Register the controllers.\n    if (controllers) {\n      this.registerControllers(app, PopApi, controllers)\n    }\n\n    // Post routes hook.\n    this.postRoutes(app)\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/Routes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "Routes",
    "memberof": "src/middleware/Routes.js",
    "static": true,
    "longname": "src/middleware/Routes.js~Routes",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/Routes.js",
    "importStyle": "Routes",
    "description": "Class for setting up the Routes.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Routes"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#constructor",
    "access": "public",
    "description": "Create a new Routes object.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the routes to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the routes."
      },
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "options.app",
        "description": "The application instance to add middleware\nand bind the routes to."
      },
      {
        "nullable": true,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.controllers",
        "description": "The controllers to register."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "'app' are required options for the routes\nmiddleware!"
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "registerControllers",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#registerControllers",
    "access": "public",
    "description": "Register the controllers found in the controllers directory.  ",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The application instance to register the routers\nto."
      },
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the routes to."
      },
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "controllers",
        "description": "The controllers to register."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "convertErrors",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#convertErrors",
    "access": "public",
    "description": "Convert the thrown errors to an instance of ApiError.  ",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ApiError} - The converted error.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The caught error."
      },
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ApiError"
      ],
      "spread": false,
      "description": "The converted error."
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "setNotFoundHandler",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#setNotFoundHandler",
    "access": "public",
    "description": "Catch the 404 errors.  ",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ApiError} - A standard 404 error.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ApiError"
      ],
      "spread": false,
      "description": "A standard 404 error."
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "setErrorHandler",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#setErrorHandler",
    "access": "public",
    "description": "Error handler middleware  ",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The error object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "ApiError"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The caught error."
      },
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The error object."
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "removeServerHeader",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#removeServerHeader",
    "access": "public",
    "description": "Remove security sensitive headers.  ",
    "see": [
      "https://github.com/shieldfy/API-Security-Checklist#output  "
    ],
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "IncomingMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The incoming message request object."
      },
      {
        "nullable": false,
        "types": [
          "ServerResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function to move to the next\nmiddleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "preRoutes",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#preRoutes",
    "access": "public",
    "description": "Hook method for setting up middleware pre setting up the routes.  ",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The application instance to add middleware to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "postRoutes",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#postRoutes",
    "access": "public",
    "description": "Hook method for setting up middleware post setting up the routes.  ",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The application instance to add middleware to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "setupRoutes",
    "memberof": "src/middleware/Routes.js~Routes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Routes.js~Routes#setupRoutes",
    "access": "public",
    "description": "Setup the application service.  ",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The application instance to add middleware and\nbind the routes to."
      },
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the routes to."
      },
      {
        "nullable": true,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": true,
        "name": "controllers",
        "description": "The controllers to register."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/middleware/index.js",
    "content": "// Export the necessary modules.\nexport Cli from './Cli'\nexport Database from './Database'\nexport HttpServer from './HttpServer'\nexport Logger from './Logger'\nexport Routes from './Routes'\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/middleware/internal/index.js",
    "content": "// Export the necessary modules.\nexport padStart from './padStart'\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/internal/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/middleware/internal/padStart.js",
    "content": "// @flow\n/**\n * Polyfill for String.prototype.padStart.\n * @link https://developer.mozzila.org/en-US/docs/Web/JAvaScript/Refernce/Global_Objects/String/padStart\n * @param {!number} targetLength - The length of the resulting string once the\n * current string had been padded.\n * @param {?string} padString - The string to pad the currnet string with.\n * @returns {string} - A string of the specified length with the pad string\n * applied to the start.\n */\nexport default function (targetLength: number, padString?: string): string {\n  let targetLen: number = targetLength >> 0\n  let padStr: string = String(padString || ' ')\n\n  if (this.length > targetLen) {\n    return String(this)\n  }\n\n  targetLen = targetLen - this.length\n  if (targetLen > padStr.length) {\n    padStr += padStr.repeat(targetLen / padStr.length)\n  }\n\n  return padStr.slice(0, targetLen) + String(this)\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/middleware/internal/padStart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "padStart",
    "memberof": "src/middleware/internal/padStart.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middleware/internal/padStart.js~padStart",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/middleware/internal/padStart.js",
    "importStyle": "padStart",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLength",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "padString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/utils.js",
    "content": "// Import the necessary modules.\n// @flow\nimport del from 'del'\nimport mkdirp from 'mkdirp'\nimport { existsSync } from 'fs'\nimport { spawn } from 'child_process'\n\n/**\n * Create a temporary directory for files for the API.\n * @param {!string} path - The path to the directory to create.\n * @returns {Promise<string, Error>} - The path to the created directory.\n */\nexport async function createTemp(path: string): Promise<string | Error> {\n  if (existsSync(path)) {\n    await del([`${path}/**`]).then(([ res ]) => res)\n  }\n\n  return new Promise(resolve => {\n    mkdirp.sync(path)\n    return resolve(path)\n  })\n}\n\n/**\n * Execute a command from within the root folder.\n * @param {!string} cmd - The command to execute.\n * @param {?Array<string>} args - The arguments passed to the command.\n * @returns {Promise<string, Error>} - The output of the command.\n */\nexport function executeCommand(\n  cmd: string,\n  args: Array<string>\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const res = spawn(cmd, args)\n\n    res.stdout.on('data', data => resolve(data.toString()))\n    res.on('error', reject)\n    res.on('close', code => {\n      if (code === 0) {\n        return resolve()\n      }\n\n      const err = new Error(`${cmd} exited with code: ${code}`)\n      return reject(err)\n    })\n  })\n}\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "createTemp",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~createTemp",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/utils.js",
    "importStyle": "{createTemp}",
    "description": "Create a temporary directory for files for the API.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, Error>} - The path to the created directory."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the directory to create."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "The path to the created directory."
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "executeCommand",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~executeCommand",
    "access": "public",
    "export": true,
    "importPath": "pop-api/src/utils.js",
    "importStyle": "{executeCommand}",
    "description": "Execute a command from within the root folder.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, Error>} - The output of the command."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cmd",
        "description": "The command to execute."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments passed to the command."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, Error>"
      ],
      "spread": false,
      "description": "The output of the command."
    }
  },
  {
    "kind": "index",
    "content": "# pop-api\n\n[![Build Status](https://travis-ci.org/popcorn-official/pop-api.svg?branch=master)](https://travis-ci.org/popcorn-official/pop-api)\n[![Windows Build](https://img.shields.io/appveyor/ci/chrisalderson/pop-api/master.svg?label=windows)](https://ci.appveyor.com/project/ChrisAlderson/pop-api)\n[![Coverage Status](https://coveralls.io/repos/github/popcorn-official/pop-api/badge.svg?branch=master)](https://coveralls.io/github/popcorn-official/pop-api?branch=master)\n[![Dependency Status](https://david-dm.org/popcorn-official/pop-api.svg)](https://david-dm.org/popcorn-official/pop-api)\n[![devDependencies Status](https://david-dm.org/popcorn-official/pop-api/dev-status.svg)](https://david-dm.org/popcorn-official/pop-api?type=dev)\n\n## Features\n\nThe pop-api project aims to provide the core modules for the\n[`popcorn-api`](https://github.com/popcorn-official/popcorn-api) project, but\ncan also be used for other purposes by using middleware.\n - Cli middleware for reading user input with [`commander.js`](https://github.com/tj/commander.js).\n - Database middleware for connection to MongoDB through [`mongoose`](https://github.com/Automattic/mongoose).\n - Logging of routes and other information using [`winston`](https://github.com/winstonjs/winston).\n - Uses [`express`](https://github.com/expressjs/express) under the hood with:\n   - Body middleware with [`body-parser`](https://github.com/expressjs/body-parser)\n   - Error handling\n   - Security middleware with [`helmet`](https://github.com/helmetjs/helmet)\n - Interface for registering routes for [`express`](https://github.com/expressjs/express).\n - Data Access Layer (DAL) class for standard CRUD operations.\n - Route controller to handle routes for your content.\n\n## Installation\n\n```\n $ npm install --save pop-api\n```\n\n## Documentation\n\n - [General documentation](https://popcorn-official.github.io/pop-api/manual/index.html)\n - [Api docs](https://popcorn-official.github.io/pop-api/identifiers.html)\n - [Usage](https://popcorn-official.github.io/pop-api/manual/usage.html) \n - [Middleware](https://popcorn-official.github.io/pop-api/manual/middleware.html) \n - [Advanced Usage](https://popcorn-official.github.io/pop-api/manual/advanced.html) \n - [Extending Middleware](https://popcorn-official.github.io/pop-api/manual/extending-middleware.html) \n\n## Usage\n\nFor your basic setup you have to create a controller which will handle the\nroutes. Your controller needs to extend from the `IController` interface to\nimplement the `registerRoutes` method which will be called during the setup.\n\nThe route controller below will be created with a constructor which takes an\nobject as the parameter. This example will register a `GET /hello` route and\nsends a JSON object as a response with a greeting to the name provided by the\nobject from the constructor.\n\n```js\n// ./MyRouteController.js\nimport { IController } from 'pop-api'\n\n// Extend your route controller from the 'IController' interface.\nexport default class MyRouteController extends IController {\n\n  // The constructor takes an object as the parameter.\n  constructor({name}) {\n    super()\n\n    this.name = name\n  }\n\n  // Implement the 'registerRoutes' method from the 'IController interface.\n  registerRoutes(router, PopApi) {\n    router.get('/hello', this.getHello.bind(this))\n  }\n\n  // Router middleware to execute on the 'GET /hello' route.\n  getHello(req, res, next) {\n    return res.json({\n      message: `Hello, ${this.name}`\n    })\n  }\n\n}\n```\n\nTo initialize the API we create an array of the route controllers and their\nconstructor arguments we want to register. Then we just call the `init` method\nwith the route controllers array, and the name and version your API (needed for\nthe Cli). The API should run by default on port `5000`.\n\n```js\n// ./index.js\nimport { PopApi } from 'pop-api'\nimport MyRouteController from './MyRouteController'\nimport { name, version } from './package.json'\n\n;(async () => {\n  try {\n    // Define the controllers you want to use.\n    const controllers = [{\n      Controller: MyRouteController,  // The controller to register.\n      args: {                         // The arguments passed down to the\n        name: 'John'                  // The additional arguments to pass to\n                                      // your route controller.\n      }\n    }]\n\n    // Initiate your API with the necessary parameters.\n    await PopApi.init({                \n      controllers,  // The controllers to register.\n      name,         // The name of your API.\n      version       // The version of your API.\n    })\n    // API is available on port 5000.\n    // GET http://localhost:5000/hello -> { message: 'Hello, John' }\n  } catch (err) {\n    console.log(err)\n  }\n})()\n```\n\n## License\n\nMIT License\n",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"pop-api\",\n  \"version\": \"0.6.4\",\n  \"description\": \"The base modules for popcorn-api\",\n  \"dependencies\": {\n    \"@chrisalderson/express-winston\": \"^3.0.0\",\n    \"body-parser\": \"^1.18.2\",\n    \"commander\": \"^2.13.0\",\n    \"compression\": \"^1.7.1\",\n    \"debug\": \"^3.1.0\",\n    \"del\": \"^3.0.0\",\n    \"express\": \"^4.16.2\",\n    \"helmet\": \"^3.10.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"mongoose\": \"^5.0.1\",\n    \"p-map\": \"^1.2.0\",\n    \"response-time\": \"^2.3.2\",\n    \"winston\": \"^3.0.0-rc1\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-plugin-external-helpers\": \"^6.22.0\",\n    \"babel-plugin-istanbul\": \"^4.1.5\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-export-extensions\": \"^6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-plugin-transform-strict-mode\": \"^6.24.1\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-flow\": \"^6.23.0\",\n    \"babel-register\": \"^6.26.0\",\n    \"chai\": \"^4.1.2\",\n    \"coveralls\": \"^3.0.0\",\n    \"cross-env\": \"^5.1.3\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.16.0\",\n    \"eslint-config-vixo\": \"^2.0.2\",\n    \"flow\": \"^0.2.3\",\n    \"flow-bin\": \"^0.64.0\",\n    \"flow-typed\": \"^2.2.3\",\n    \"husky\": \"^0.14.3\",\n    \"mocha\": \"^5.0.0\",\n    \"nyc\": \"^11.4.1\",\n    \"rollup\": \"^0.55.1\",\n    \"rollup-plugin-babel\": \"^3.0.3\",\n    \"rollup-plugin-json\": \"^2.3.0\",\n    \"rollup-plugin-node-resolve\": \"^3.0.2\",\n    \"rollup-plugin-uglify\": \"^3.0.0\",\n    \"sinon\": \"^4.2.2\",\n    \"standard-version\": \"^4.3.0\",\n    \"supertest\": \"^3.0.0\",\n    \"uglify-es\": \"^3.3.9\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production rollup -c\",\n    \"coveralls\": \"cat ./coverage/lcov.info | coveralls\",\n    \"debug\": \"npm run dev --inspect\",\n    \"dev\": \"cross-env DEBUG=pop-api* NODE_ENV=development node -r babel-register ./examples/exampleSetup.js\",\n    \"docs\": \"esdoc -c .esdoc.json\",\n    \"flow\": \"flow\",\n    \"flow-typed\": \"flow-typed install\",\n    \"lint\": \"eslint {example,src,test}/** *.js$\",\n    \"release\": \"git add ./docs/* && standard-version -a\",\n    \"precommit\": \"npm run lint && npm run flow\",\n    \"prerelease\": \"npm run build && npm run docs\",\n    \"prepush\": \"npm run test\",\n    \"test\": \"cross-env NODE_ENV=test nyc -r=lcov -r=text mocha --exit --recursive\"\n  },\n  \"engines\": {\n    \"node\": \">=7.10.1\"\n  },\n  \"keywords\": [\n    \"api\",\n    \"popcorn\",\n    \"middleware\"\n  ],\n  \"main\": \"./build/pop-api.js\",\n  \"module\": \"./build/pop-api.esm.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/popcorn-official/pop-api.git\"\n  },\n  \"files\": [\n    \"build/**/*\"\n  ]\n}\n",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": "# pop-api\n\n[![Build Status](https://travis-ci.org/popcorn-official/pop-api.svg?branch=master)](https://travis-ci.org/popcorn-official/pop-api)\n[![Windows Build](https://img.shields.io/appveyor/ci/chrisalderson/pop-api/master.svg?label=windows)](https://ci.appveyor.com/project/ChrisAlderson/pop-api)\n[![Coverage Status](https://coveralls.io/repos/github/popcorn-official/pop-api/badge.svg?branch=master)](https://coveralls.io/github/popcorn-official/pop-api?branch=master)\n[![Dependency Status](https://david-dm.org/popcorn-official/pop-api.svg)](https://david-dm.org/popcorn-official/pop-api)\n[![devDependencies Status](https://david-dm.org/popcorn-official/pop-api/dev-status.svg)](https://david-dm.org/popcorn-official/pop-api?type=dev)\n\n## Features\n\nThe pop-api project aims to provide the core modules for the\n[`popcorn-api`](https://github.com/popcorn-official/popcorn-api) project, but\ncan also be used for other purposes by using middleware.\n - Cli middleware for reading user input with [`commander.js`](https://github.com/tj/commander.js).\n - Database middleware for connection to MongoDB through [`mongoose`](https://github.com/Automattic/mongoose).\n - Logging of routes and other information using [`winston`](https://github.com/winstonjs/winston).\n - Uses [`express`](https://github.com/expressjs/express) under the hood with:\n   - Body middleware with [`body-parser`](https://github.com/expressjs/body-parser)\n   - Error handling\n   - Security middleware with [`helmet`](https://github.com/helmetjs/helmet)\n - Interface for registering routes for [`express`](https://github.com/expressjs/express).\n - Data Access Layer (DAL) class for standard CRUD operations.\n - Route controller to handle routes for your content.\n\n## Installation\n\n```\n $ npm install --save pop-api\n```\n\n## Documentation\n\n - [General documentation](https://popcorn-official.github.io/pop-api/manual/index.html)\n - [Api docs](https://popcorn-official.github.io/pop-api/identifiers.html)\n - [Usage](https://popcorn-official.github.io/pop-api/manual/usage.html) \n - [Middleware](https://popcorn-official.github.io/pop-api/manual/middleware.html) \n - [Advanced Usage](https://popcorn-official.github.io/pop-api/manual/advanced.html) \n - [Extending Middleware](https://popcorn-official.github.io/pop-api/manual/extending-middleware.html) \n\n## Usage\n\nFor your basic setup you have to create a controller which will handle the\nroutes. Your controller needs to extend from the `IController` interface to\nimplement the `registerRoutes` method which will be called during the setup.\n\nThe route controller below will be created with a constructor which takes an\nobject as the parameter. This example will register a `GET /hello` route and\nsends a JSON object as a response with a greeting to the name provided by the\nobject from the constructor.\n\n```js\n// ./MyRouteController.js\nimport { IController } from 'pop-api'\n\n// Extend your route controller from the 'IController' interface.\nexport default class MyRouteController extends IController {\n\n  // The constructor takes an object as the parameter.\n  constructor({name}) {\n    super()\n\n    this.name = name\n  }\n\n  // Implement the 'registerRoutes' method from the 'IController interface.\n  registerRoutes(router, PopApi) {\n    router.get('/hello', this.getHello.bind(this))\n  }\n\n  // Router middleware to execute on the 'GET /hello' route.\n  getHello(req, res, next) {\n    return res.json({\n      message: `Hello, ${this.name}`\n    })\n  }\n\n}\n```\n\nTo initialize the API we create an array of the route controllers and their\nconstructor arguments we want to register. Then we just call the `init` method\nwith the route controllers array, and the name and version your API (needed for\nthe Cli). The API should run by default on port `5000`.\n\n```js\n// ./index.js\nimport { PopApi } from 'pop-api'\nimport MyRouteController from './MyRouteController'\nimport { name, version } from './package.json'\n\n;(async () => {\n  try {\n    // Define the controllers you want to use.\n    const controllers = [{\n      Controller: MyRouteController,  // The controller to register.\n      args: {                         // The arguments passed down to the\n        name: 'John'                  // The additional arguments to pass to\n                                      // your route controller.\n      }\n    }]\n\n    // Initiate your API with the necessary parameters.\n    await PopApi.init({                \n      controllers,  // The controllers to register.\n      name,         // The name of your API.\n      version       // The version of your API.\n    })\n    // API is available on port 5000.\n    // GET http://localhost:5000/hello -> { message: 'Hello, John' }\n  } catch (err) {\n    console.log(err)\n  }\n})()\n```\n\n## License\n\nMIT License\n",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Usage\n\nFor your basic setup you have to create a controller which will handle the\nroutes. Your controller needs to extend from the `IController` interface to\nimplement the `registerRoutes` method which will be called during the setup.\n\nThe route controller below will be created with a constructor which takes an\nobject as the parameter. This example will register a `GET /hello` route and\nsends a JSON object as a response with a greeting to the name provided by the\nobject from the constructor.\n\n```js\n// ./MyRouteController.js\nimport { IController } from 'pop-api'\n\n// Extend your route controller from the 'IController' interface.\nexport default class MyRouteController extends IController {\n\n  // The constructor takes an object as the parameter.\n  constructor({name}) {\n    super()\n\n    this.name = name\n  }\n\n  // Implement the 'registerRoutes' method from the 'IController interface.\n  registerRoutes(router, PopApi) {\n    router.get('/hello', this.getHello.bind(this))\n  }\n\n  // Router middleware to execute on the 'GET /hello' route.\n  getHello(req, res, next) {\n    return res.json({\n      message: `Hello, ${this.name}`\n    })\n  }\n\n}\n```\n\nTo initialize the API we create an array of the route controllers and their\nconstructor arguments we want to register. Then we just call the `init` method\nwith the route controllers array, and the name and version your API (needed for\nthe Cli). The API should run by default on port `5000`.\n\n```js\n// ./index.js\nimport { PopApi } from 'pop-api'\nimport MyRouteController from './MyRouteController'\nimport { name, version } from './package.json'\n\n;(async () => {\n  try {\n    // Define the controllers you want to use.\n    const controllers = [{\n      Controller: MyRouteController,  // The controller to register.\n      args: {                         // The arguments passed down to the\n        name: 'John'                  // The additional arguments to pass to\n                                      // your route controller.\n      }\n    }]\n\n    // Initiate your API with the necessary parameters.\n    await PopApi.init({                \n      controllers,  // The controllers to register.\n      name,         // The name of your API.\n      version       // The version of your API.\n    })\n    // API is available on port 5000.\n    // GET http://localhost:5000/hello -> { message: 'Hello, John' }\n  } catch (err) {\n    console.error(err)\n  }\n})()\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/manual/middleware.md",
    "name": "./manual/middleware.md",
    "content": "# Middleware\n\n - [Cli](#cli)\n - [Database](#database)\n - [HttServer](#httpserver)\n - [Logger](#logger)\n - [Routes](#routes)\n - [Custom Middleware](#custom-middleware)\n\n## Cli\n\nThe `Cli` middleware uses [`commander.js`](https://github.com/tj/commander.js)\nmodules to parse the input of the user. The middleware itself doesn't bind\nanything to the `PopApi` instance, instead it parses the input and run the API\naccordingly.\n\n```js\nimport { PopApi, Cli, Logger } from 'pop-api'\nimport { name, version } from './package.json'\n\nconst cliOpts = {\n  name,               // The name of your application\n  version,            // The version of your application\n  argv: process.argv  // The arguments to parse\n}\nPopApi.use(Cli, cliOpts)\n\n// Parsed the input given and binds options for the `Logger` middleware.\n// See the documentation for the `Logger` middleware for more options.\nconst { pretty, quiet } = PopApi.loggerArgs\nPopApi.use(Logger, {\n  pretty,\n  quiet\n})\n```\n\n## Database\n\nThe `Database` middleware bind the `database` key to the `PopApi` instance.\nThis middleware allows you to `connect()` and `disconnect()` from MongoDB\nthrough [`mongoose`](https://github.com/Automattic/mongoose), and you can\nexport and import a collection with the\n`exportCollection(collection, outputFile)` and\n`importCollection(collection, jsonFile)` methods. The example below uses a\n`.env` file to store the optional `username` and `password` values to establish\na connection with MongoDB.\n\n```dosini\n# .env\n# (Optional) Assuming you use the `dotenv` modules to get your username and\n# password for the database connection\nDATABASE_USERNAME=myUsername\nDATABASE_PASSWORD=myPassword\n```\n\nNow setup the `Database` middleware:\n\n```js\n// (Optional) Assuming you use the `dotenv` modules to get your username and\n// password for the database connection\nimport 'dotenv/config'\nimport { PopApi, Database } from 'pop-api'\nimport MyModel from './MyModel'\nimport { name } from './package.json'\n\nconst databaseOpts = {\n  database: name,                           // The name of the database.\n  hosts: ['localhost'],                     // A lst of hosts to connect to.\n  dbPort: 27017,                            // (Optional) The port of MongoDB.\n  username: process.env.DATABASE_USERNAME,  // (Optional) The username to\n                                            // connect to the hosts.\n  password: process.env.DATABASE_PASSWORD   // (Optional) The password to\n                                            // connect to the hosts.\n}\nPopApi.use(Database, databaseOpts)\n\n// The database middleware can now be used to connect to the MongoDB database.\nPopApi.database.connect()\n  .then(() => {\n    // Connection successful!\n    return new MyModel({\n      _id: 'John',\n      name: 'John',\n      slug: 'john'\n    }).save()\n  })\n  .catch(err => {\n    // Handle error\n  })\n  .then(() => {\n    // Disconnect from MongoDB.\n    PopApi.database.disconnect()\n  })\n```\n\n## HttpServer\n\nThe `HttpServer` middleware forks workers so heavy load process can run on\ndifferent child processes. It also makes the\n [`express`](https://github.com/expressjs/express) app listen on a port.\n\n```js\nimport { PopApi, HttpServer } from 'pop-api'\n\nconst httpServerOpts = {\n  app: PopApi.app,   // The express instance from PopApi.\n  serverPort: 5000,  // The port your API will be running on.\n  workers: 2         // The amount of workers to fork.\n}\nPopApi.use(HttpServer, httpServerOpts)\n// Doesn't bind anything to the PopApi instance, just forks the workers and\n// makes the app listen on your configured port.\n```\n\n## Logger\n\nThe `Logger` middleware uses the\n[`winston`](https://github.com/winstonjs/winston) module to create a global\n`logger` object. This `logger` object has various levels to log, such as\n`debug`, `info`, `warn` and `error`. This middleware also binds an\n[`express`](https://github.com/expressjs/express) middleware function to log\nthe routes.\n\n```js\nimport { PopApi, Logger } from 'pop-api'\nimport { join } from 'path'\nimport { name } from './package.json'\n\nconst loggerOpts = {\n  name,                                 // The name of the log file.\n  logDir: join(...[__dirname, 'tmp']),  // The directory to store the logs in.\n  pretty: true,                         // (Optional) Pretty output mode.\n  quiet: false                          // (Optional) Quiet mode for no output.\n}\nPopApi.use(Logger, loggerOpts)\n\nlogger.info('\\logger\\' will be a global object')\n// Other log levels you can use are:\n//  - logger.debug()\n//  - logger.info()\n//  - logger.warn()\n//  - logger.error()\n\n// Log middleware for logging routes, used by the `Routes` middleware, or set\n// it yourself.\nconst { httpLogger } = PopApi\nPopApi.app.use(httpLogger)\n```\n\n## Routes\n\nThe `Routes` middleware configures the\n[`express`](https://github.com/expressjs/express) instance. It sets up the\n[`body-parser`](https://github.com/expressjs/body-parser) and\n[`compression`](https://github.com/exprssjs/compression) middleware, as well as\nthe error and security middleware. Thirdly it registers the controllers with\ntheir routes.\n\n```js\nimport { PopApi, Routes } from 'pop-api'\nimport MyRouteController from './MyRouteController'\n\nconst routesOpts = {\n  app: PopApi.app,                  // The express instance from PopApi.\n  controllers: [{                   // A list of controllers to register.\n    Controller: MyRouteController,  // The controller you want to register.\n    args: {}                        // The arguments to pass down to the\n                                    // MyRouteController.\n  }]\n}\nPopApi.use(Routes, routesOpts)\n// Doesn't bind anything to the PopApi instance, just configures the middleware\n// for express and registers the controllers.\n```\n\n## Custom Middleware\n\nThe `init` method will register the default Cli, Database, Logger, Routes and\nServer middleware, but you can also extends the functionality of `pop-api` by\nusing your own middleware. In the middleware example below we create a\nmiddleware class which will only hold a simple greeting.\n\n```js\n// ./MyMiddleware.js\nexport default class MyMiddleware {\n\n  // The first parameter will be the 'PopApi' instance, the second will be an\n  // object you can use to configure your middleware.\n  constructor(PopApi, {name}) {\n    this.name = name\n\n    PopApi.myMiddleware = this.myMiddleware()\n  }\n\n  myMiddleware() {\n    return `Hello, ${this.name}`\n  }\n\n}\n```\n\nTo use the middleware we created you call the `use` method. The first parameter\nwill be the middleware class you want to create, the second parameter is\noptional, but can be used to configure your middleware.\n\n```js\n// ./index.js\nimport { PopApi } from 'pop-api'\nimport MyMiddleware from './MyMiddleware'\n\n// Use the middleware you created.\nPopApi.use(MyMiddleware, {\n  name: 'John'\n})\n\n// The middleware will be bound to the 'PopApi' instance.\nconst greeting = PopApi.myMiddleware\nconsole.log(greeting) // Hello, John\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/manual/advanced.md",
    "name": "./manual/advanced.md",
    "content": "# Advanced Usage\n\nThe advanced setup has some more options to setup your API in regards with\nthe database connection and the port your API will be listening on. But also\nhow you can serve content through built-in route controllers as well as how to\nextend the built-in route controllers.\n\n - [Mongoose Models](#mongoose-models)\n - [ContentService](#contentservice)\n - [Controllers](#controllers)\n - [Configuration](#configuration)\n\n## Mongoose Models\n\nFor the advanced setup we will create a model using\n[`mongoose`](https://github.com/Automattic/mongoose) and a route controller\nextending from `BaseContentController`. Below we create a simple\n[`mongoose`](https://github.com/Atomattic/mongoose) model.\n\n```js\n// ./myModel.js\nimport mongoose, { Schema } from 'mongoose'\n\n// Create a simple mongoose schema.\nconst mySchema =  new Schema({\n  _id: {\n    type: String,\n    required: true,\n    index: {\n      unique: true\n    }\n  },\n  slug: {\n    type: String,\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  }\n})\n\n// Create a model from the schema.\nexport default mongoose.model('MyModel', mySchema)\n```\n\n## ContentService\n\nBefore we create a route controller we need a `ContentService` object which\nats as the DAL for the CRUD operations. The `ContentService` object will be\nused as a parameter when creating the route controller.\n\n```js\n// ./myService.js\nimport { ContentService } from 'pop-api'\nimport MyModel from './myModel'\n\nconst myService = new ContentService({\n  Model: MyModel,           // The model for the service.\n  projection: { name: 1 },  // Projection used to display multiple items.\n  query: {}                 // (Optional) The default query to fetch items.\n})\n\n// Methods available:\n// - myService.getContents([base])\n// - myService.getPage([sort, page, query])\n// - myService.getContent(id, [projection])\n// - myService.createContent(obj)\n// - myService.createMany(arr)\n// - myService.updateContent(id, obj)\n// - myService.updateMany(arr)\n// - myService.deleteContent(id)\n// - myService.deleteMany(arr)\n// - myService.getRandomContent()\n\nexport default myService\n```\n\nNow we create a route controller which extends from `BaseContentController`.\nThis route controller can be used on it's own or classes can extend from it to\nimplement new behaviour or override existing behaviour. The\n`BaseContentController` class already implements the `registerRoutes` method\nfrom `IController` and adds the following routes to your API (note the base\npath will be taken from the `basePath` value of your route controller):\n - GET    `/examples`        Get a list of a available pages to get.\n - GET    `/examples/:page`  Get a page of models.\n - GET    `/example/:id`     Get a single model.\n - POST   `/examples`        Create a new model.\n - PUT    `/example/:id`     Update an existing model.\n - DELETE `/example/:id`     Delete a model.\n - GET    `/random/example`  Get a random model.\n\n## Controllers\n\nThe following example extends from `BaseContentController`, registers the default\nroutes and implements a `GET /hello` route.\n\n```js\n// ./MyRouteController.js\nimport { BaseContentController } from 'pop-api'\n\n// Extend from the `BaseContentController` which has defaults methods for CRUD\n// operations.\nexport default class MyRouteController extends BaseContentController {\n\n  // The constructor of `BaseContentController` needs an instance of\n  // `ContentService` which we will create later. It can also take additional\n  // parameters for your own implementation.\n  constructor({basePath, service, name}) {\n    // binds: this.baseBath and this.service.\n    super({basePath, service})\n\n    this.name = name\n  }\n\n  // Implement the 'registerRoutes' method from the 'IController interface.\n  registerRoutes(router, PopApi) {\n    // Call the `registerRoutes` method from the `BaseContentController` class\n    // to register the default routes.\n    super.registerRoutes(router, PopApi)\n\n    // And add additional routes for your route controller.\n    router.get('/hello', this.getHello.bind(this))\n  }\n\n  // Router middleware to execute on the 'GET /hello' route.\n  getHello(req, res, next) {\n    return res.json({\n      message: `Hello, ${this.name}`\n    })\n  }\n\n}\n```\n\n## Configuration\n\nNow to initial your API we create a list of route controllers we want to\nregister with their constructor parameters. This example also shows additional\nparameters to pass down to the `init` method of the `PopApi` instance.\n\n```js\n// ./index.js\nimport express from 'express'\nimport { PopApi, ContentService } from 'pop-api'\nimport { join } from 'path'\nimport MyRouteController from './MyRouteController'\nimport myService from './myService'\nimport { name, version } from './package.json'\n\n;(async () => {\n  try {\n    // Define the controllers you want to use.\n    const controllers = [{\n      Controller: MyRouteController,  // The controller to register.\n      args: {                         // The arguments passed down to the\n                                      // constructor of the controller.\n        basePath: 'example',          // The base path to register the routes\n                                      // to.\n        service: myService,           // The content service for the\n                                      // BaseContentController.\n        name: 'John'                  // The additional arguments to pass to\n      }                               // your route controller.\n    }]\n\n    // Initiate your API with optional parameters.\n    await PopApi.init({\n      app: express(),          // The express instance  to use.\n      controllers,             // The controllers to register.\n      name,                    // The name of your API.\n      version,                 // The version of your API.\n      logDir: join(...[        // (Optional) The directory to store the log\n        __dirname,             // files in. Defaults to `./tmp`.\n        '..',\n        'tmp'\n      ]),\n      hosts: ['11.11.11.11'],  // (Optional) The hosts to connect to for\n                               // MongoDB. Defaults to `['localhost']`.\n      dbPort: 27019,           // (Optional) The port of MongoDB to connect to\n                               // Defaults to `27017`.\n      username: 'myUsername',  // (Optional) The username to connect to.\n                               // MongoDB. Defaults to `null`.\n      password: 'myPassword',  // (Optional) The password to connect to.\n                               // MongoDB. Defaults to `null`.\n      serverPort: 8080,        // (Optional) The port to run your API on.\n                               // Defaults to `5000`.\n      workers: 4               // The amount of workers to fork for the server.\n                               // Defaults to `2`.\n    }, [                       // (Optional) A list of middlewares to register.\n      // Cli,                  // Defaults to:\n      // Logger,               //  [Cli, Logger, Database, Routes, HtttpServer]\n      // Database,\n      // Routes,\n      // HttpServer\n    ])\n    // API is available on port 8080.\n\n    // GET http://localhost:8080/hello\n    // { \"message\": \"Hello, John\" }\n\n    // GET http://localhost:8080/examples\n    // [\"/examples/1', \"/examples/2\"]\n\n    // GET http://localhost:8080/examples/1\n    // [\n    //   { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"John\" },\n    //   { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"Mary\" }\n    // ]\n\n    // GET http://localhost:8080/example/578df3efb618f5141202a196\n    // { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"John\", \"slug\": \"john\" }\n\n    // POST http://localhost:8080/examples\n    // body: { \"name\": \"Mary\", \"slug\": \"mary\" }\n    // { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"Mary\", \"slug\": \"mary\" }\n\n    // PUT http://localhost:8080/example/578df3efb618f5141202a196\n    // body: { \"name\": \"James\", \"slug\": \"james\" }\n    // { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"James\", \"slug\": \"james\" }\n\n    // DELETE http://localhost:8080/example/578df3efb618f5141202a196\n    // { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"James\", \"slug:\" :james\" }\n\n    // GET http://localhost:8080/random/example -> { }\n    // { \"_id\": \"578df3efb618f5141202a196\", \"name\": \"Mary\", \"slug\": \"mary\" }\n  } catch (err) {\n    console.error(err)\n  }\n})()\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/manual/extending-middleware.md",
    "name": "./manual/extending-middleware.md",
    "content": "# Extending Middleware\n\nThe behaviour of the default middlewares can be overwritten or extended by\ncreating a new class which extends from the base middleware class. This section\nwill look into how you can do this for your own project.\n - [Cli](#cli)\n - [Database](#database)\n - [Logger](#logger)\n - [Routes](#routes)\n - [Using Custom Middlewares](#using-custom-middlewares)\n\n## Cli\n\nThe `CLi` middleware uses [`commander.js`](https://github.com/tj/commander) for\nparsing the command line input. The following example overrides the\n`initOptions` method to add additional options for your cli middleware. It also\noverrides the `getHelp` method to add an example which will be printed wiith\nthe `--help` flag. Lastly it overrides the `run` method which parses the cli\ninput and runs the prrogram based on the input.\n\n```js\n// ./middlewares/MyCli.js\nimport { Cli } from 'pop-api'\n\nexport default class MyCli extends Cli {\n\n  /**\n   * @override\n   */\n  constructor(PopApi, {argv, name, version, myCliOption}) {\n    // Do not pass down the 'argv' key so it does not get parsed by commander.\n    super(PopApi, {name, version})\n\n    // Bind our option to the instance.\n    this.myCliOption = myCliOption\n\n    // Run the Cli middleware.\n    this.run(PopApi, argv)\n  }\n\n  /**\n   * @override\n   */\n  initOptions() {\n    // First initiate the options from the base Cli middleware.\n    super.initOptions()\n\n    // Now you can add your own options.\n    return this.program\n      .option('--my-option', 'My awesome option')\n  }\n\n  /**\n   * @override\n   */\n  getHelp() {\n    // Get the help message from the base Cli middleware.\n    const baseHelp = super.getHelp()\n\n    // And add your own message for your options.  \n    return baseHelp.concat([\n      `    $ ${this.name} --my-option`\n    ])\n  }\n\n  // Method ot be executed when the `--my-option` flag is set.\n  runMyOption() {\n    console.log(`Executing my awesome option: ${this.myCliOption}`)\n  }\n\n  /**\n   * @override\n   */\n  run(PopApi, argv) {\n    // Now we parse the options.\n    this.program.parse(argv)\n\n    // Check the use input if your option flag has been filled.\n    if (this.program.myOption) {\n      return this.runMyOption()\n    }\n\n    // Run any other input options from the base Cli middleware.\n    return super.run(PopApi)\n  }\n\n}\n```\n\n### Database\n\nBy default the `Database` middleware uses\n[`mongoose`](https://github.com/Automattic/mongoose) to create a Connection to\nMongoDB. For this example we will create a MySQL connection with the\n[`mysql`](https://github.com/mysqljs/mysql) module. It overrides the `connect`\nand `disconnect` methods to establish and end a connection.\n\n```js\n// ./middlewares/MySqlDatabase.js\nimport mysql from 'mysql'\nimport { Database } from 'pop-api'\n\nexport default class MySqlDatabase extends Database {\n\n  /**\n   * @override\n   */\n  constructor(PopApi: any, {\n    database,\n    hosts = ['localhost'],\n    dbPort = 3306,\n    username,\n    password\n  }) {\n    super(PopApi, {\n      database,\n      hosts,\n      dbPort,\n      username,\n      password\n    })\n\n    // Bind the connection to the instance to connect and disconnect.\n    this.connection = mysql.createConnection({\n      host: this.hosts[0],\n      user: this.username,\n      password: this.password,\n      database: this.database,\n      port: this.dbPort\n    })\n    // Set the database middleware as an instance of MySqlDatabase.\n    PopApi.database = this\n  }\n\n  /**\n   * @override\n   */\n  connect()  {\n    return new Promise((resolve, reject) => {\n      return this.connection\n        .connect(err => err ? reject(err) : resolve('Connected'))\n    })\n  }\n\n  /**\n   * @override\n   */\n  disconnect() {\n    return new Promise(resolve => this.connection.end())\n  }\n\n}\n```\n\n### Logger\n\nThe `Logger` middleware uses [`winston`](https://github.com/winstonjs/winston)\nby default as a logger. Here we will extend the default logger middleware to\nuse [`pino`](). We override the `createLoggerInstance` to create an instance of\n`pino` and override the `consoleFormatter` to use as a formatter function for\n`pino`.\n\n```js\n// ./middlewares/PinoLogger.js\nimport pino from 'pino'\nimport { join } from 'path'\nimport { Logger } from 'pop-api'\nimport { sprintf } from 'sprintf-js'\n\nexport default class PinoLogger extends Logger {\n\n  /**\n   * @override\n   */\n  consoleFormatter(args) {\n    const level = pino.levels.labels[args.level]\n    const color = this.getLevelColor(level)\n\n    return sprintf(\n      `\\x1b[0m[%s] ${color}%5s:\\x1b[0m %2s/%d: \\x1b[36m%s\\x1b[0m`,\n      new Date(args.time).toISOString(),\n      level.toUpperCase(),\n      this.name,\n      args.pid,\n      args.msg\n    )\n  }\n\n  /**\n   * @override\n   */\n  createLoggerInstance(suffix, pretty) {\n    // Let the http logger middleware be handled by the base Logger middleware.\n    if (suffix === 'http') {\n      return super.createLoggerInstance(suffix, pretty)\n    }\n\n    const prettyPino = pino.pretty({\n      // Or don't use a formatter at all.\n      formatter: this.consoleFormatter.bind(this)\n    })\n    prettyPino.pipe(process.stdout)\n\n    // Create our logger object.\n    return pino({\n      name: `${this.name}-${suffix}`,\n      safe: true\n    }, prettyPino)\n  }\n\n}\n```\n\n### Routes\n\nThe default web framework used by the `Routes` middleware is\n[`express`](https://github.com/expressjs/express). For this example we will\nextend the `Routes` middleware to use\n[`restfy`](https://github.com/restify/node-restify) as the web framework. For\nthis we will override the `preRoutes` method to use middleware for `restify`\ninstead of `express`.\n\n```js\n// ./middlewares/RestifyRoutes.js\nimport helmet from 'helmet'\nimport restify from 'restify'\nimport { Routes } from 'pop-api'\n\nexport default class RestifyRoutes extends Routes {\n\n  /**\n   * @override\n   */\n  preRoutes(app) {\n    // Register the middleware plugins for Restify.\n    app.use(restify.plugins.bodyParser())\n    app.use(restify.plugins.queryParser())\n    app.use(restify.plugins.gzipResponse())\n\n    // Use helmet middleware or any other for Restify.\n    app.use(helmet())\n    app.use(helmet.contentSecurityPolicy({\n      directives: {\n        defaultSrc: ['\\'none\\'']\n      }\n    }))\n    app.use(this.removeServerHeader)\n  }\n\n}\n```\n\n## Using Custom Middlewares\n\nThe 'init' method  can take a list of middlewares as a second parameter. This\nlist of middlewares will be used by the PopApi instance. All the middlewares\nwill be initiated with options from the 'init' method, so you can add\nadditional options to your middleware.\n\n```js\n// ./index.js\nimport restify from 'restify'\nimport { PopApi, HttpServer, utils } from 'pop-api'\n\nimport {\n  MyCli,\n  MySqlDatabase,\n  PinoLogger,\n  RestifyRoutes\n} from './middlewares'\nimport { name, version } from '../package.json'\n\n(async () => {\n  try {\n    await PopApi.init({\n      name,\n      version,\n      myCliOption,\n      ...\n    }, [\n      MyCli, // Will be initiated with additional 'myCliOption' value.\n      PinoLogger,\n      MySqlDatabase,\n      RestifyRoutes,\n      HttpServer\n    ])\n  } catch (err) {\n    console.error(err)\n  }\n})()\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Change Log\n\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n\n<a name=\"0.6.4\"></a>\n## [0.6.4](https://github.com/popcorn-official/pop-api/compare/v0.6.3...v0.6.4) (2019-12-27)\n\n\n\n<a name=\"0.6.3\"></a>\n## [0.6.3](https://github.com/popcorn-official/pop-api/compare/v0.6.2...v0.6.3) (2018-01-05)\n\n\n### Bug Fixes\n\n* Add rollup-plugin-json to dev deps ([#51](https://github.com/popcorn-official/pop-api/issues/51)) ([013ede2](https://github.com/popcorn-official/pop-api/commit/013ede2))\n\n\n\n<a name=\"0.6.2\"></a>\n## [0.6.2](https://github.com/popcorn-official/pop-api/compare/v0.6.1...v0.6.2) (2018-01-01)\n\n\n### Bug Fixes\n\n* Move $match as the first pipe line for getPage agregrate ([#49](https://github.com/popcorn-official/pop-api/issues/49)) ([2d0f1b9](https://github.com/popcorn-official/pop-api/commit/2d0f1b9))\n\n\n\n<a name=\"0.6.1\"></a>\n## [0.6.1](https://github.com/popcorn-official/pop-api/compare/v0.6.0...v0.6.1) (2017-12-29)\n\n\n\n<a name=\"0.6.0\"></a>\n# [0.6.0](https://github.com/popcorn-official/pop-api/compare/v0.5.1...v0.6.0) (2017-12-27)\n\n\n### Features\n\n* **docs:** Automatically publish documentation ([#45](https://github.com/popcorn-official/pop-api/issues/45)) ([7b2c93e](https://github.com/popcorn-official/pop-api/commit/7b2c93e))\n\n\n\n<a name=\"0.5.1\"></a>\n## [0.5.1](https://github.com/popcorn-official/pop-api/compare/v0.5.0...v0.5.1) (2017-12-27)\n\n\n### Bug Fixes\n\n* Fix using default params with dotenv file ([#43](https://github.com/popcorn-official/pop-api/issues/43)) ([746d0ed](https://github.com/popcorn-official/pop-api/commit/746d0ed))\n\n\n\n<a name=\"0.5.0\"></a>\n# [0.5.0](https://github.com/popcorn-official/pop-api/compare/v0.4.1...v0.5.0) (2017-12-26)\n\n\n### Features\n\n* Throw type error for incorrect middleware options ([#38](https://github.com/popcorn-official/pop-api/issues/38)) ([50b8f65](https://github.com/popcorn-official/pop-api/commit/50b8f65))\n* **debug:** Add debug feature for extra output ([#41](https://github.com/popcorn-official/pop-api/issues/41)) ([a6feb83](https://github.com/popcorn-official/pop-api/commit/a6feb83))\n\n\n\n<a name=\"0.4.1\"></a>\n## [0.4.1](https://github.com/popcorn-official/pop-api/compare/v0.4.0...v0.4.1) (2017-12-19)\n\n\n### Bug Fixes\n\n* **padStart:** Add polyfill for String.prototype.padStart ([#34](https://github.com/popcorn-official/pop-api/issues/34)) ([a22670b](https://github.com/popcorn-official/pop-api/commit/a22670b))\n\n\n\n<a name=\"0.4.0\"></a>\n# [0.4.0](https://github.com/popcorn-official/pop-api/compare/v0.3.1...v0.4.0) (2017-12-19)\n\n\n### Bug Fixes\n\n* Close server correctly ([#31](https://github.com/popcorn-official/pop-api/issues/31)) ([9822a49](https://github.com/popcorn-official/pop-api/commit/9822a49))\n\n\n### Features\n\n* Add support for windows ([#30](https://github.com/popcorn-official/pop-api/issues/30)) ([bc8d146](https://github.com/popcorn-official/pop-api/commit/bc8d146))\n* **init:** Add support to use additional options for middlewares ([#33](https://github.com/popcorn-official/pop-api/issues/33)) ([e0f11ed](https://github.com/popcorn-official/pop-api/commit/e0f11ed))\n\n\n\n<a name=\"0.3.1\"></a>\n## [0.3.1](https://github.com/popcorn-official/pop-api/compare/v0.3.0...v0.3.1) (2017-12-10)\n\n\n### Bug Fixes\n\n* Fixed issue where database name is undefined when initiating the api ([#28](https://github.com/popcorn-official/pop-api/issues/28)) ([2a16bda](https://github.com/popcorn-official/pop-api/commit/2a16bda))\n* Make msg a function to fix http logging ([#29](https://github.com/popcorn-official/pop-api/issues/29)) ([4d2fa4e](https://github.com/popcorn-official/pop-api/commit/4d2fa4e))\n\n\n\n<a name=\"0.3.0\"></a>\n# [0.3.0](https://github.com/popcorn-official/pop-api/compare/v0.2.1...v0.3.0) (2017-12-10)\n\n\n### Bug Fixes\n\n* **deps:** Remove unused rollup-watch and babel-preset-minify deps ([#26](https://github.com/popcorn-official/pop-api/issues/26)) ([2916f79](https://github.com/popcorn-official/pop-api/commit/2916f79))\n* **docs:** Removed done todos [ci skip] ([#27](https://github.com/popcorn-official/pop-api/issues/27)) ([32d0a1a](https://github.com/popcorn-official/pop-api/commit/32d0a1a))\n\n\n### Features\n\n* Allow custom middleware to be passed down to the init method ([#21](https://github.com/popcorn-official/pop-api/issues/21)) ([4ba1ac5](https://github.com/popcorn-official/pop-api/commit/4ba1ac5)), closes [#22](https://github.com/popcorn-official/pop-api/issues/22) [#19](https://github.com/popcorn-official/pop-api/issues/19) [#12](https://github.com/popcorn-official/pop-api/issues/12)\n* Build with Rollup to reduce package size ([#19](https://github.com/popcorn-official/pop-api/issues/19)) ([6d60954](https://github.com/popcorn-official/pop-api/commit/6d60954))\n\n\n\n<a name=\"0.2.1\"></a>\n## [0.2.1](https://github.com/popcorn-official/pop-api/compare/v0.2.0...v0.2.1) (2017-12-09)\n\n\n\n<a name=\"0.2.0\"></a>\n# [0.2.0](https://github.com/popcorn-official/pop-api/compare/v0.1.0...v0.2.0) (2017-12-05)\n\n\n### Bug Fixes\n\n* HttpServer listens to port with 0 workers ([#10](https://github.com/popcorn-official/pop-api/issues/10)) ([5a45e31](https://github.com/popcorn-official/pop-api/commit/5a45e31))\n* Remove unused rimraf from package.json ([#1](https://github.com/popcorn-official/pop-api/issues/1)) ([e64c63d](https://github.com/popcorn-official/pop-api/commit/e64c63d))\n\n\n### Features\n\n* Add helmet for security middleware ([#11](https://github.com/popcorn-official/pop-api/issues/11)) ([4b52572](https://github.com/popcorn-official/pop-api/commit/4b52572))\n* Add support for Restify ([#7](https://github.com/popcorn-official/pop-api/issues/7)) ([01b0531](https://github.com/popcorn-official/pop-api/commit/01b0531))\n\n\n\n<a name=\"0.1.0\"></a>\n# 0.1.0 (2017-11-28)\n\n\n### Features\n\n* **initial-release:** Initial release for npm registry ([c5269e7](https://github.com/popcorn-official/pop-api/commit/c5269e7))\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/CONTRIBUTING.md",
    "name": "./CONTRIBUTING.md",
    "content": "# Contributing\n\nSo you're interested in giving us a hand? That's awesome! We've put together\nsome brief guidelines that should help you get started quickly and easily.\n\nThere are lots and lots of ways to get involved, this document covers:\n - [Raising Issues](#raising-issues)\n   - [Report  A Bug](#report-a-bug)\n   - [Feature Requests](#feature-requests)\n   - [Pull Requests](#pull-requests)\n - [Commit Messages](#commit-messages)\n - [Styleguides](#styleguides)\n   - [JavaScript Styleguide](#javascript-styleguide)\n   - [Tests Styleguide](#tests-styleguide)\n   - [Documentation Styleguide](#documentation-styleguide)\n - [Setting up for development](#setting-up-for-development)\n   - [npm scripts](#npm-scripts)\n   - [Git hooks](#git-hooks)\n\n## Raising Issues\n\nIf you're about to raise an issue because you think that you've found a problem\nwith the application, or you'd like to make a request for a new feature in the\ncodebase, or any other reason… please read this first.\n\nThe GitHub issue tracker is the preferred channel for\n[bug reports](#report-a-bug), [feature requests](#feature-requests), and\n[pull requests](#pull-requests) but respect the following restrictions:\n\n* Please **do not** use the issue tracker for personal support requests.\n* Please **do not** derail or troll issues. Keep the discussion on topic and\nrespect the opinions of others.\n\n### Report A Bug\n\nA bug is a _demonstrable problem_ that is caused by the code in the repository.\nGood bug reports are extremely helpful - thank you!\n\nGuidelines for bug reports:\n1. **Use the GitHub issue search** &mdash; check if the issue has already been\nreported.\n2. **Check if the issue has been fixed** &mdash; try to reproduce it using the\nlatest `master` or look for [closed issues](https://github.com/popcorn-official/pop-api/issues?q=is%3Aissue+is%3Aclosed).\n3. **Include a screencast if relevant** - Is your issue about a design or front\nend feature or bug? The most helpful thing in the world is if we can *see* what\nyou're talking about. Just drop the picture after writing your issue, it'll be\nuploaded and shown to the developers.\n3. Use the Issue tab on GitHub to start [creating a bug report](https://github.com/popcorn-official/pop-api/issues/new).\nA good bug report shouldn't leave others needing to chase you up for more\ninformation. Be sure to include all the possible required details and the steps\nto take to reproduce the issue.\n\n### Feature Requests\n\nFeature requests are welcome. Before you submit one be sure to:\n1. **Use the [GitHub Issues search](https://github.com/popcorn-official/pop-api/issues)**\nand check the feature hasn't already been requested.\n2. Take a moment to think about whether your idea fits with the scope and aims\nof the project, or if it might better fit being an app/plugin.\n3. Remember, it's up to *you* to make a strong case to convince the project's\nleaders of the merits of this feature. Please provide as much detail and\ncontext as possible, this means explaining the use case and why it is likely to\nbe common.\n4. Clearly indicate whether this is a feature request for the application\nitself, or for packages like Providers, Metadatas, or other.\n\n### Pull Requests\n\nPull requests are awesome. If you're looking to raise a PR for something which\ndoesn't have an open issue, please think carefully about\n[raising an issue](#report-a-bug) which your PR can close, especially if you're\nfixing a bug. This makes it more likely that there will be enough information\navailable for your PR to be properly tested and merged. To make sure your PR is\naccepted as quickly as possible, you should be sure to have read all the\nguidelines on:\n\n* [Commit Messages](#commit-messages)\n* [Stylesguides](#styleguides)\n\n## Commit Messages\n\nThis project uses the [Conventional Commits](https://conventionalcommits.org/)\nconvention. If you are not familiar with this convention please read about it\nfirst before creating a commit message or a PR.\n\n## Styleguides\n\n### JavaScript Styleguide\n\nAll JavaScript must adhere to [JavaScript Standard Style](http://standardjs.com/).\n\n* Inline `export`s with expressions whenever possible\n  ```js\n  // Use this:\n  export default class ClassName {\n\n  }\n\n  // Instead of:\n  class ClassName {\n\n  }\n  export default ClassName\n  ```\n\n### Tests Styleguide\n\n- Include thoughtfully-worded, well-structured [Mocha](https://mochajs.org/) tests in the `./test` folder.\n- Treat `describe` as a noun or situation.\n- Treat `it` as a statement about state or how an operation changes state.\n\n### Documentation Styleguide\n\n * Use [Markdown](https://daringfireball.net/projects/markdown).\n * Reference methods and classes in markdown with the custom `{}` notation:\n   * Reference classes with `{ClassName}`\n   * Reference instance methods with `{ClassName.methodName}`\n   * Reference class methods with `{ClassName#methodName}`\n\n## Setting up for development\n\nTo setup your local machine to start working on the project you can follow these\nsteps:\n\n1. Install [MongoDB](https://www.mongodb.com/) including `mongoexport` and `mongoimport`\n2. Install [NodeJS](https://nodejs.org/) (at least Node v7.10.1 or greater)\n3. Clone the repository with: `git clone https://github.com/popcorn-official/pop-api.git`\n4. Install dependencies `npm i`\n5. Install the flow-typed libraries with `npm run flow-typed`\n\n### npm scripts\n\nThe following [`npm-scripts`](https://docs.npmjs.com/misc/scripts) are available in order to help you with the\ndevelopment of the project.\n\n```\n $ npm run build    # Transform the code with 'babel'\n $ npm run docs     # Generate the documentation with 'esdoc'\n $ npm run debug    # Run the applicaiton in debug mode\n $ npm run dev      # Run the application in development mode\n $ npm run flow     # Check flow typings\n $ npm run lint     # Check javascript style\n $ npm run test     # Run unit tests\n```\n\n### Git hooks\n\nThe following `git` hooks are available to ensure the changes you are about to\nmake follow the [styleguides](#styleguides) and make sure your changes pass the\ntests.\n\n```\npre-commit          # npm run lint && npm run flow\npre-push            # npm run test\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/CODE_OF_CONDUCT.md",
    "name": "./CODE_OF_CONDUCT.md",
    "content": "# Contributor Covenant Code of Conduct\n\n - [Our Pledge](#our-pledge)\n - [Our Standards](#our-standards)\n - [Our Responsibilities](#our-responsibilities)\n - [Scope](#scope)\n - [Enforcement](#enforcement)\n - [Attribution](#attribution)\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age,\nbody size, disability, ethnicity, gender identity and expression, level of\nexperience, nationality, personal appearance, race, religion, or sexual\nidentity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n - Using welcoming and inclusive language\n - Being respectful of differing viewpoints and experiences\n - Gracefully accepting constructive criticism\n - Focusing on what is best for the community\n - Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n - The use of sexualized language or imagery and unwelcome sexual attention or advances\n - Trolling, insulting/derogatory comments, and personal or political attacks\n - Public or private harassment\n - Publishing others' private information, such as a physical or electronic address, without explicit permission\n - Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an\nappointed representative at an online or offline event. Representation of a\nproject may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at `hello@popcorntime.sh`. The\nproject team will review and investigate all complaints, and will respond in a\nway that it deems appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an\nincident. Further details of specific enforcement policies may be posted\nseparately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at http://contributor-covenant.org/version/1/4\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 220,
    "kind": "testFile",
    "name": "test/PopApi.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport cluster from 'cluster'\nimport sinon from 'sinon'\nimport winston from 'winston'\nimport { expect } from 'chai'\n\nimport {\n  Logger,\n  PopApi,\n  Routes\n} from '../src'\nimport {\n  name,\n  version\n} from '../package'\n\n/** @test {PopApi} */\ndescribe('PopApi', () => {\n  /** @test {PopApi.app} */\n  it('should have a static express instance', () => {\n    expect(PopApi.app).to.exist\n  })\n\n  /** @test {PopApi.debug} */\n  it('should have a debug function for extra output', () => {\n    expect(PopApi.debug).to.exist\n    expect(PopApi.debug).to.be.a('function')\n  })\n\n  /** @test {PopApi._installedPlugins} */\n  it('should have a static map for the installed plugins', () => {\n    expect(PopApi._installedPlugins).to.exist\n    expect(PopApi._installedPlugins).to.be.a('Map')\n  })\n\n  /**\n   * Helper function to test the `use` method.\n   * @param {!string} msg - The message to print for the test.\n   * @returns {undefined}\n   */\n  function testUse(msg: string): void {\n    /** @test {PopApi.use} */\n    it(msg, () => {\n      PopApi.use(Routes, {\n        app: PopApi.app\n      })\n\n      expect(PopApi._installedPlugins).to.be.a('Map')\n      expect(PopApi._installedPlugins.size).to.equal(1)\n    })\n  }\n\n  // Execute the tests.\n  [\n    'should register a middleware plugin',\n    'should not register the same plugin twice'\n  ].map(testUse)\n\n  /** @test {PopApi.use} */\n  it('should not register the plugin if it is not a class', () => {\n    PopApi.use({})\n\n    expect(PopApi._installedPlugins).to.be.a('Map')\n    expect(PopApi._installedPlugins.size).to.equal(1)\n  })\n\n  /** @test {PopApi.init} */\n  it('should initiate the PopApi instance', done => {\n    process.argv = ['', '', '-m', 'pretty']\n    PopApi.init({\n      name,\n      version,\n      workers: 0\n    }).then(res => done())\n      .catch(done)\n  })\n\n  /** @test {PopApi.init} */\n  it('should initiate the PopApi instance and not create the temporary directory', done => {\n    const masterStub = sinon.stub(cluster, 'isMaster')\n    const forkStub = sinon.stub(cluster, 'fork')\n    masterStub.value(false)\n\n    process.argv = ['', '', '-m', 'pretty']\n    PopApi.init({\n      name,\n      version\n    }).then(() => {\n      masterStub.restore()\n      forkStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the PopApi tests.\n   * @type {Function}\n   */\n  after(done => {\n    winston.loggers.close()\n    process.env.NODE_ENV = 'test'\n    PopApi.server.closeApi(PopApi.database, done)\n    Logger.fileTransport = null\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/PopApi.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/PopApi.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0",
    "access": null,
    "description": "PopApi",
    "lineNumber": 20,
    "testTargets": [
      "PopApi"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it1",
    "access": null,
    "description": "should have a static express instance",
    "lineNumber": 22,
    "testTargets": [
      "PopApi.app"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it2",
    "access": null,
    "description": "should have a debug function for extra output",
    "lineNumber": 27,
    "testTargets": [
      "PopApi.debug"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it3",
    "access": null,
    "description": "should have a static map for the installed plugins",
    "lineNumber": 33,
    "testTargets": [
      "PopApi._installedPlugins"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it4",
    "access": null,
    "lineNumber": 45,
    "testTargets": [
      "PopApi.use"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it5",
    "access": null,
    "description": "should not register the plugin if it is not a class",
    "lineNumber": 62,
    "testTargets": [
      "PopApi.use"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it6",
    "access": null,
    "description": "should initiate the PopApi instance",
    "lineNumber": 70,
    "testTargets": [
      "PopApi.init"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/PopApi.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/PopApi.spec.js~describe0.it7",
    "access": null,
    "description": "should initiate the PopApi instance and not create the temporary directory",
    "lineNumber": 81,
    "testTargets": [
      "PopApi.init"
    ]
  },
  {
    "__docId__": 229,
    "kind": "testFile",
    "name": "test/controllers/BaseContentController.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport bodyParser from 'body-parser'\nimport { expect } from 'chai'\nimport express, { type $Application } from 'express'\nimport sinon from 'sinon'\nimport supertest from 'supertest'\n\nimport {\n  BaseContentController,\n  ContentService,\n  Database,\n  PopApi\n} from '../../src'\nimport {\n  ExampleModel,\n  exampleModel1,\n  exampleModel2\n} from '../../examples'\nimport { name } from '../../package'\n\n/**\n * The base endpoint to test.\n * @type {string}\n */\nconst content: string = 'example'\n\n/** @test {BaseContentController} */\ndescribe('BaseContentController', () => {\n  /**\n   * The base content controller object to test.\n   * @type {BaseContentController}\n   */\n  let baseContentController: BaseContentController\n\n  /**\n   * The service for the base content controller.\n   * @type {ContentService}\n   */\n  let service: ContentService\n\n  /**\n   * The express instance to test with.\n   * @type {Express}\n   */\n  let app: $Application\n\n  /**\n   * The database middleware to connect to the MongoDb instance.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * The supertest object to make requests with.\n   * @type {Object}\n   */\n  let request: Object\n\n  /**\n   * The id of the content to get.\n   * @type {string}\n   */\n  let id: string\n\n  /**\n   * Hook for setting up the base content controller tests.\n   * @type {Function}\n   */\n  before(done => {\n    app = express()\n    app.use(bodyParser.urlencoded({\n      extended: true\n    }))\n    app.use(bodyParser.json())\n\n    service = new ContentService({\n      Model: ExampleModel,\n      projection: {\n        name: 1\n      }\n    })\n    baseContentController = new BaseContentController({\n      service,\n      basePath: content\n    })\n    baseContentController.registerRoutes(app)\n    request = supertest(app)\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {BaseContentController#constructor} */\n  it('should check the attributes of the BaseContentController', () => {\n    expect(baseContentController.service).to.be.an('object')\n    expect(baseContentController.service).to.equal(service)\n    expect(baseContentController.basePath).to.a('string')\n    expect(baseContentController.basePath).to.equal(content)\n  })\n\n  /** @test {BaseContentController#registerRoutes} */\n  it('should register the routes with of the controller', () => {\n    const app = express()\n\n    let res = baseContentController.registerRoutes(app)\n    expect(res).to.be.undefined\n\n    // @flow-ignore reference del to delete to mock Restify.\n    app.del = app.delete\n    delete app.delete\n\n    res = baseContentController.registerRoutes(app)\n    expect(res).to.be.undefined\n  })\n\n  /** @test {BaseContentController} */\n  describe('with an empty database', () => {\n    /**\n     * Hook for setting up the AudioController tests.\n     * @type {Function}\n     */\n    before(done => {\n      ExampleModel.remove({}).exec()\n        .then(() => done())\n        .catch(done)\n    })\n\n    /**\n     * Expect a 204 result from a request.\n     * @param {!string} route - The route to test.\n     * @returns {undefined}\n     */\n    function expectNoContent(route: string): void {\n      it(`should get a 204 status from the GET [/${route}] route`, done => {\n        request.get(route)\n          .expect(204)\n          .then(() => done())\n          .catch(done)\n      })\n    }\n\n    // Execute the tests.\n    [\n      `/${content}s`,\n      `/${content}/1`,\n      `/${content}/id`,\n      `/random/${content}`\n    ].map(expectNoContent)\n  })\n\n  /** @test {BaseContentController} */\n  describe('with a filled database', () => {\n    /**\n     * The query object passed along to the 'getAudios' tests.\n     * @type {Object}\n     */\n    let query: Object\n\n    /**\n     * Hook for setting up the AudioController tests.\n     * @type {Function}\n     */\n    before(done => {\n      query = {\n        order: -1\n      }\n\n      done()\n    })\n\n    /**\n     * Expect a 200 result from a request.\n     * @param {!Object} request - The request object to test with.\n     * @param {!Function} done - The done function of Mocha.\n     * @returns {undefined}\n     */\n    function testOkResponse(request: Object, done: Function): void {\n      request.expect(200)\n        .set('Content', 'application/json')\n        .then(() => done())\n        .catch(done)\n    }\n\n    /** @test {BaseContentController#createContent} */\n    it(`should get a 200 status from the POST [/${content}s] route`, done => {\n      const req = request.post(`/${content}s`)\n        .send(exampleModel1)\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#getContents} */\n    it(`should get a 200 status from the GET [/${content}s] route`, done => {\n      const req = request.get(`/${content}s`)\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#getPage} */\n    it(`should get a 200 status from the GET [/${content}s/:page] route`, done => {\n      const req = request.get(`/${content}s/1`).query({\n        ...query,\n        sort: 'name'\n      })\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#getPage} */\n    it(`should get a 200 status from the GET [/${content}s/:page] route`, done => {\n      request.get(`/${content}s/1`).query({\n        ...query\n      }).expect(200)\n        .then(res => {\n          const random = Math.floor(Math.random() * res.body.length)\n          id = res.body[random]._id\n\n          done()\n        }).catch(done)\n    })\n\n    /** @test {BaseContentController#updateContent} */\n    it(`should get a 200 status from the PUT [/${content}/:id] route`, done => {\n      const { name } = exampleModel2\n      const req = request.put(`/${content}/${id}`)\n        .send({ name })\n\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#getContent} */\n    it(`should get a 200 status from the GET [/${content}/:id] route`, done => {\n      const req = request.get(`/${content}/${id}`)\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#getRandomContent} */\n    it(`should get a 200 status from the GET [/random/${content}] route`, done => {\n      const req = request.get(`/random/${content}`)\n      testOkResponse(req, done)\n    })\n\n    /** @test {BaseContentController#deleteContent} */\n    it(`should get a 200 status from the DELETE [/${content}/:id] route`, done => {\n      const req = request.delete(`/${content}/${id}`)\n      testOkResponse(req, done)\n    })\n  })\n\n  /** @test {BaseContentController} */\n  describe('will throw errors', () => {\n    /**\n     * Expect a 500 result from a request.\n     * @param {!Object} request - The request object to test with.\n     * @param {!Function} done - The done function of Mocha.\n     * @param {!Object} stub - The stub which made the internal server error.\n     * @returns {undefined}\n     */\n    function testInternalServerError(\n      request: Object,\n      done: Function,\n      stub: Object | null = null\n    ): void {\n      request.expect(500)\n        .set('Content', 'application/json')\n        .then(() => {\n          if (stub) {\n            stub.restore()\n          }\n\n          done()\n        })\n        .catch(done)\n    }\n\n    /** @test {BaseContentController#createContent} */\n    it(`should get a 500 status from the POST [/${content}/:id] route`, done => {\n      const req = request.post(`/${content}s`)\n      testInternalServerError(req, done)\n    })\n\n    /** @test {BaseContentController#getContents} */\n    it(`should get a 500 status from the GET [/${content}s] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'count')\n      stub.rejects()\n\n      const req = request.get(`/${content}s`)\n      testInternalServerError(req, done, stub)\n    })\n\n    /** @test {BaseContentController#getPage} */\n    it(`should get a 500 status from the GET [/${content}s/:page] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'aggregate')\n      stub.rejects()\n\n      const req = request.get(`/${content}s/1`)\n      testInternalServerError(req, done, stub)\n    })\n\n    /** @test {BaseContentController#updateContent} */\n    it(`should get a 500 status from the PUT [/${content}s] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'findOneAndUpdate')\n      stub.rejects()\n\n      const req = request.put(`/${content}/${id}`)\n      testInternalServerError(req, done, stub)\n    })\n\n    /** @test {BaseContentController#getContent} */\n    it(`should get a 500 status from the GET [/${content}/:id] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'findOne')\n      stub.rejects()\n\n      const req = request.get(`/${content}/${id}`)\n      testInternalServerError(req, done, stub)\n    })\n\n    /** @test {BaseContentController#getRandomContent} */\n    it(`should get a 500 status from the GET [/random/${content}] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'aggregate')\n      stub.rejects()\n\n      const req = request.get(`/random/${content}`)\n      testInternalServerError(req, done, stub)\n    })\n\n    /** @test {BaseContentController#deleteContent} */\n    it(`should get a 500 status from the DELETE [/${content}/:id] route`, done => {\n      const stub = sinon.stub(ExampleModel, 'findOneAndRemove')\n      stub.rejects()\n\n      const req = request.delete(`/${content}/${id}`)\n      testInternalServerError(req, done, stub)\n    })\n  })\n\n  /**\n   * Hook for tearing down the AudioController tests.\n   * @type {Function}\n   */\n  after(done => {\n    ExampleModel.findOneAndRemove({\n      _id: exampleModel1._id\n    }).exec()\n      .then(() => database.disconnect())\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/controllers/BaseContentController.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/controllers/BaseContentController.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8",
    "access": null,
    "description": "BaseContentController",
    "lineNumber": 30,
    "testTargets": [
      "BaseContentController"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.it9",
    "access": null,
    "description": "should check the attributes of the BaseContentController",
    "lineNumber": 100,
    "testTargets": [
      "BaseContentController#constructor"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.it10",
    "access": null,
    "description": "should register the routes with of the controller",
    "lineNumber": 108,
    "testTargets": [
      "BaseContentController#registerRoutes"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe11",
    "access": null,
    "description": "with an empty database",
    "lineNumber": 123,
    "testTargets": [
      "BaseContentController"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe11.it12",
    "access": null,
    "lineNumber": 140
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "access": null,
    "description": "with a filled database",
    "lineNumber": 158,
    "testTargets": [
      "BaseContentController"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it14",
    "access": null,
    "lineNumber": 191,
    "testTargets": [
      "BaseContentController#createContent"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it15",
    "access": null,
    "lineNumber": 198,
    "testTargets": [
      "BaseContentController#getContents"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it16",
    "access": null,
    "lineNumber": 204,
    "testTargets": [
      "BaseContentController#getPage"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it17",
    "access": null,
    "lineNumber": 213,
    "testTargets": [
      "BaseContentController#getPage"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it18",
    "access": null,
    "lineNumber": 226,
    "testTargets": [
      "BaseContentController#updateContent"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it19",
    "access": null,
    "lineNumber": 235,
    "testTargets": [
      "BaseContentController#getContent"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it20",
    "access": null,
    "lineNumber": 241,
    "testTargets": [
      "BaseContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe13.it21",
    "access": null,
    "lineNumber": 247,
    "testTargets": [
      "BaseContentController#deleteContent"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "access": null,
    "description": "will throw errors",
    "lineNumber": 254,
    "testTargets": [
      "BaseContentController"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it23",
    "access": null,
    "lineNumber": 280,
    "testTargets": [
      "BaseContentController#createContent"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it24",
    "access": null,
    "lineNumber": 286,
    "testTargets": [
      "BaseContentController#getContents"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it25",
    "access": null,
    "lineNumber": 295,
    "testTargets": [
      "BaseContentController#getPage"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it26",
    "access": null,
    "lineNumber": 304,
    "testTargets": [
      "BaseContentController#updateContent"
    ]
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it27",
    "access": null,
    "lineNumber": 313,
    "testTargets": [
      "BaseContentController#getContent"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it28",
    "access": null,
    "lineNumber": 322,
    "testTargets": [
      "BaseContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/controllers/BaseContentController.spec.js~describe8.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/BaseContentController.spec.js~describe8.describe22.it29",
    "access": null,
    "lineNumber": 331,
    "testTargets": [
      "BaseContentController#deleteContent"
    ]
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "name": "test/controllers/ContentService.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport {\n  ContentService,\n  Database,\n  PopApi\n} from '../../src'\nimport {\n  ExampleModel,\n  exampleModel1,\n  exampleModel2\n} from '../../examples'\nimport { name } from '../../package'\n\n/** @test {ContentService} */\ndescribe('ContentService', () => {\n  /**\n   * The content service to test.\n   * @type {ContentService}\n   */\n  let contentService: ContentService\n\n  /**\n   * The database manager to connect to mongodb.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the ContentService tests.\n   * @type {Function}\n   */\n  before(done => {\n    contentService = new ContentService({\n      Model: ExampleModel,\n      projection: {\n        name: 1\n      },\n      query: {}\n    })\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {ContentService#constructor} */\n  it('should check the attributes of the ContentService', () => {\n    expect(contentService.Model).to.a('function')\n    expect(contentService.Model).to.equal(ExampleModel)\n    expect(contentService.projection).to.an('object')\n    expect(contentService.projection).to.deep.equal({\n      name: 1\n    })\n    expect(contentService.query).to.an('object')\n    expect(contentService.query).to.deep.equal({})\n    expect(contentService.pageSize).to.a('number')\n    expect(contentService.pageSize).to.equal(25)\n  })\n\n  /** @test {ContentService#getPage} */\n  it('should get a page of content items', done => {\n    contentService.getPage({\n      name: -1\n    }, 1, {\n      name: exampleModel1.name\n    }).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getPage} */\n  it('should get a page of content items', done => {\n    contentService.getPage({\n      name: -1\n    }, 'all').then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getPage} */\n  it('should get a page of content items', done => {\n    contentService.getPage({\n      name: -1\n    }, NaN).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getPage} */\n  it('should get a page of content items', done => {\n    contentService.getPage({\n      name: -1\n    }).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#createContent} */\n  it('should create a single content item', done => {\n    contentService.createContent(exampleModel1).then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#createMany} */\n  it('should create multiple content items', done => {\n    contentService.createMany([exampleModel2]).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getContents} */\n  it('should get the available pages', done => {\n    contentService.getContents().then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#updateContent} */\n  it('should update a single content item', done => {\n    const { slug } = exampleModel1\n    contentService.updateContent(slug, exampleModel1).then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#updateMany} */\n  it('should update multiple content items', done => {\n    contentService.updateMany([\n      exampleModel1,\n      exampleModel2\n    ]).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getContent} */\n  it('should get a single content item', done => {\n    contentService.getContent(exampleModel1.slug).then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#getRandomContent} */\n  it('should get a single random content item', done => {\n    contentService.getRandomContent().then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#deleteContent} */\n  it('should delete a single content item', done => {\n    contentService.deleteContent(exampleModel1.slug).then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ContentService#deleteMany} */\n  it('should delete multiple content items', done => {\n    contentService.deleteMany([exampleModel2]).then(res => {\n      expect(res).to.be.an('array')\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the ContentService tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/controllers/ContentService.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/controllers/ContentService.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30",
    "access": null,
    "description": "ContentService",
    "lineNumber": 19,
    "testTargets": [
      "ContentService"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it31",
    "access": null,
    "description": "should check the attributes of the ContentService",
    "lineNumber": 54,
    "testTargets": [
      "ContentService#constructor"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it32",
    "access": null,
    "description": "should get a page of content items",
    "lineNumber": 68,
    "testTargets": [
      "ContentService#getPage"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it33",
    "access": null,
    "description": "should get a page of content items",
    "lineNumber": 80,
    "testTargets": [
      "ContentService#getPage"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it34",
    "access": null,
    "description": "should get a page of content items",
    "lineNumber": 90,
    "testTargets": [
      "ContentService#getPage"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it35",
    "access": null,
    "description": "should get a page of content items",
    "lineNumber": 100,
    "testTargets": [
      "ContentService#getPage"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it36",
    "access": null,
    "description": "should create a single content item",
    "lineNumber": 110,
    "testTargets": [
      "ContentService#createContent"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it37",
    "access": null,
    "description": "should create multiple content items",
    "lineNumber": 118,
    "testTargets": [
      "ContentService#createMany"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it38",
    "access": null,
    "description": "should get the available pages",
    "lineNumber": 126,
    "testTargets": [
      "ContentService#getContents"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it39",
    "access": null,
    "description": "should update a single content item",
    "lineNumber": 134,
    "testTargets": [
      "ContentService#updateContent"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it40",
    "access": null,
    "description": "should update multiple content items",
    "lineNumber": 143,
    "testTargets": [
      "ContentService#updateMany"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it41",
    "access": null,
    "description": "should get a single content item",
    "lineNumber": 154,
    "testTargets": [
      "ContentService#getContent"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it42",
    "access": null,
    "description": "should get a single random content item",
    "lineNumber": 162,
    "testTargets": [
      "ContentService#getRandomContent"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it43",
    "access": null,
    "description": "should delete a single content item",
    "lineNumber": 170,
    "testTargets": [
      "ContentService#deleteContent"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/controllers/ContentService.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentService.spec.js~describe30.it44",
    "access": null,
    "description": "should delete multiple content items",
    "lineNumber": 178,
    "testTargets": [
      "ContentService#deleteMany"
    ]
  },
  {
    "__docId__": 268,
    "kind": "testFile",
    "name": "test/controllers/IContentController.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport { IContentController } from '../../src'\n\n/** @test {IContentController} */\ndescribe('IContentController', () => {\n  /**\n   * The content controller interface to test.\n   * @type {string}\n   */\n  let iContentController: IContentController\n\n  /**\n   * Hook for setting up the IContentController tests.\n   * @type {Function}\n   */\n  before(() => {\n    iContentController = new IContentController()\n  })\n\n  /** @test {IContentController#getContents} */\n  it('should throw an error when calling the default getContents method', () => {\n    expect(iContentController.getContents)\n      .to.throw('Using default method: \\'getContents\\'')\n  })\n\n  /** @test {IContentController#sortContent} */\n  it('should throw an error when calling the default sortContent method', () => {\n    expect(iContentController.sortContent)\n      .to.throw('Using default method: \\'sortContent\\'')\n  })\n\n  /** @test {IContentController#getPage} */\n  it('should throw an error when calling the default getPage method', () => {\n    expect(iContentController.getPage)\n      .to.throw('Using default method: \\'getPage\\'')\n  })\n\n  /** @test {IContentController#getContent} */\n  it('should throw an error when calling the default getContent method', () => {\n    expect(iContentController.getContent)\n      .to.throw('Using default method: \\'getContent\\'')\n  })\n\n  /** @test {IContentController#createContent} */\n  it('should throw an error when calling the default createContent method', () => {\n    expect(iContentController.createContent)\n      .to.throw('Using default method: \\'createContent\\'')\n  })\n\n  /** @test {IContentController#updateContent} */\n  it('should throw an error when calling the default updateContent method', () => {\n    expect(iContentController.updateContent)\n      .to.throw('Using default method: \\'updateContent\\'')\n  })\n\n  /** @test {IContentController#deleteContent} */\n  it('should throw an error when calling the default deleteContent method', () => {\n    expect(iContentController.deleteContent)\n      .to.throw('Using default method: \\'deleteContent\\'')\n  })\n\n  /** @test {IContentController#getRandomContent} */\n  it('should throw an error when calling the default getRandomContent method', () => {\n    expect(iContentController.getRandomContent)\n      .to.throw('Using default method: \\'getRandomContent\\'')\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/controllers/IContentController.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/controllers/IContentController.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45",
    "access": null,
    "description": "IContentController",
    "lineNumber": 9,
    "testTargets": [
      "IContentController"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it46",
    "access": null,
    "description": "should throw an error when calling the default getContents method",
    "lineNumber": 25,
    "testTargets": [
      "IContentController#getContents"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it47",
    "access": null,
    "description": "should throw an error when calling the default sortContent method",
    "lineNumber": 31,
    "testTargets": [
      "IContentController#sortContent"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it48",
    "access": null,
    "description": "should throw an error when calling the default getPage method",
    "lineNumber": 37,
    "testTargets": [
      "IContentController#getPage"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it49",
    "access": null,
    "description": "should throw an error when calling the default getContent method",
    "lineNumber": 43,
    "testTargets": [
      "IContentController#getContent"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it50",
    "access": null,
    "description": "should throw an error when calling the default createContent method",
    "lineNumber": 49,
    "testTargets": [
      "IContentController#createContent"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it51",
    "access": null,
    "description": "should throw an error when calling the default updateContent method",
    "lineNumber": 55,
    "testTargets": [
      "IContentController#updateContent"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it52",
    "access": null,
    "description": "should throw an error when calling the default deleteContent method",
    "lineNumber": 61,
    "testTargets": [
      "IContentController#deleteContent"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/controllers/IContentController.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IContentController.spec.js~describe45.it53",
    "access": null,
    "description": "should throw an error when calling the default getRandomContent method",
    "lineNumber": 67,
    "testTargets": [
      "IContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 278,
    "kind": "testFile",
    "name": "test/controllers/IController.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport { IController } from '../../src'\n\n/** @test {IController} */\ndescribe('IController', () => {\n  /** @test {IController#registerRoutes} */\n  it('should throw an error when calling the default registerRoutes method', () => {\n    const iController = new IController()\n    expect(iController.registerRoutes)\n      .to.throw('Using default method: \\'registerRoutes\\'')\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/controllers/IController.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/controllers/IController.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/IController.spec.js~describe54",
    "access": null,
    "description": "IController",
    "lineNumber": 9,
    "testTargets": [
      "IController"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/controllers/IController.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IController.spec.js~describe54.it55",
    "access": null,
    "description": "should throw an error when calling the default registerRoutes method",
    "lineNumber": 11,
    "testTargets": [
      "IController#registerRoutes"
    ]
  },
  {
    "__docId__": 281,
    "kind": "testFile",
    "name": "test/helpers/ApiError.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport {\n  ApiError,\n  statusCodes\n} from '../../src'\n\n/** @test {ApiError} */\ndescribe('ApiError', () => {\n  /** @test {ApiError#constructor} */\n  it('should create a new ApiError', () => {\n    const apiError = new ApiError({\n      message: 'test message'\n    })\n    expect(apiError).to.be.an('Error')\n  })\n\n  /** @test {ApiError#constructor} */\n  it('should create a new ApiError without default parameters', () => {\n    const apiError = new ApiError({\n      message: 'test message',\n      status: statusCodes.NOT_FOUND,\n      isPublic: true\n    })\n    expect(apiError).to.be.an('Error')\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/helpers/ApiError.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/helpers/ApiError.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/helpers/ApiError.spec.js~describe56",
    "access": null,
    "description": "ApiError",
    "lineNumber": 12,
    "testTargets": [
      "ApiError"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/helpers/ApiError.spec.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/helpers/ApiError.spec.js~describe56.it57",
    "access": null,
    "description": "should create a new ApiError",
    "lineNumber": 14,
    "testTargets": [
      "ApiError#constructor"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/helpers/ApiError.spec.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/helpers/ApiError.spec.js~describe56.it58",
    "access": null,
    "description": "should create a new ApiError without default parameters",
    "lineNumber": 22,
    "testTargets": [
      "ApiError#constructor"
    ]
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "test/helpers/statusCodes.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport { statusCodes } from '../../src'\n\n/** @test {statusCodes} */\ndescribe('statusCodes', () => {\n  /** @test {statusCodes} */\n  it('statusCodes should be an object', () => {\n    expect(statusCodes).to.be.an('object')\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/helpers/statusCodes.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/helpers/statusCodes.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/helpers/statusCodes.spec.js~describe59",
    "access": null,
    "description": "statusCodes",
    "lineNumber": 9,
    "testTargets": [
      "statusCodes"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/helpers/statusCodes.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "test/helpers/statusCodes.spec.js~describe59.it60",
    "access": null,
    "description": "statusCodes should be an object",
    "lineNumber": 11,
    "testTargets": [
      "statusCodes"
    ]
  },
  {
    "__docId__": 288,
    "kind": "testFile",
    "name": "test/middleware/Cli.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\n\nimport {\n  Cli,\n  PopApi\n} from '../../src'\nimport {\n  name,\n  version\n} from '../../package'\n\n/** @test {Cli} */\ndescribe('Cli', () => {\n  /**\n   * The Cli object to test\n   * @type {Cli}\n   */\n  let cli: Cli\n\n  /**\n   * Stub for `console.error'\n   * @type {Object}\n   */\n  let error: Object\n\n  /**\n   * Stub for `console.info'\n   * @type {Object}\n   */\n  let info: Object\n\n  /**\n   * Stub for `process.exit'\n   * @type {Object}\n   */\n  let exit: Object\n\n  /**\n   * Hook for setting up the Cli tests.\n   * @type {Function}\n   */\n  before(() => {\n    exit = sinon.stub(process, 'exit')\n    error = sinon.stub(console, 'error')\n    info = sinon.stub(console, 'info')\n\n    cli = new Cli(PopApi, {\n      argv: ['', '', '-m', 'pretty'],\n      name,\n      version\n    })\n  })\n\n  /** @test {Cli#constructor} */\n  it('should create a new Cli instance without arguments to parse', () => {\n    const cli = new Cli(PopApi, {\n      name,\n      version\n    })\n    expect(cli).to.be.an('object')\n\n    try {\n      new Cli(PopApi, {}) // eslint-disable-line no-new\n      expect(true).to.be.false\n    } catch (err) {\n      expect(err).to.be.an('Error')\n      expect(err.message).to.equal(\n        '\\'name\\' and \\'version\\' are required options for the Cli middleware!'\n      )\n    }\n  })\n\n  /** @test {Cli#constructor} */\n  it('should check the attributes of the Cli', () => {\n    expect(cli.program).to.exist\n    expect(cli.program).to.be.an('object')\n    expect(cli.name).to.exist\n    expect(cli.name).to.be.a('string')\n    expect(cli.version).to.exist\n    expect(cli.version).to.be.a('string')\n  })\n\n  /** @test {Cli#initOptions} */\n  it('should initiate the options for the Cli', () => {\n    const val = cli.initOptions(version)\n    expect(val).to.be.an('object')\n  })\n\n  /** @test {Cli#getHelp} */\n  it('should get the help message', () => {\n    const val = cli.getHelp()\n    expect(val).to.be.an('array')\n  })\n\n  /** @test {Cli#printHelp} */\n  it('should print the --help option', () => {\n    const val = cli.printHelp()\n    expect(val).to.be.undefined\n  })\n\n  /**\n   * Helper function to test the `_mode` method.\n   * @param {!string} mode - The mode parameter to test.\n   * @returns {void}\n   */\n  function testMode(mode: string): void {\n    /** @test {Cli#mode} */\n    it(`should run the --mode option with the '${mode}' option`, () => {\n      const val = cli.mode(mode)\n      expect(val).to.be.an('object')\n    })\n  }\n\n  // Execute the test.\n  ['quiet', 'ugly', 'pretty'].map(testMode)\n\n  /** @test {Cli#run} */\n  it('should invoke no options and print the --help option', () => {\n    const stub = sinon.stub(cli.program, 'outputHelp')\n\n    const val = cli.run({}, ['', '', '--help'])\n    expect(val).to.be.undefined\n\n    stub.restore()\n  })\n\n  /** @test {Cli#run} */\n  it('should not parse the arguments since there are none', () => {\n    cli.program.mode = null\n    const stub = sinon.stub(cli.program, 'outputHelp')\n\n    const val = cli.run()\n    expect(val).to.be.undefined\n\n    stub.restore()\n  })\n\n  /**\n   * Hook for tearing down the Cli tests.\n   * @type {Function}\n   */\n  after(() => {\n    error.restore()\n    info.restore()\n    exit.restore()\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/Cli.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/middleware/Cli.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61",
    "access": null,
    "description": "Cli",
    "lineNumber": 17,
    "testTargets": [
      "Cli"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it62",
    "access": null,
    "description": "should create a new Cli instance without arguments to parse",
    "lineNumber": 59,
    "testTargets": [
      "Cli#constructor"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it63",
    "access": null,
    "description": "should check the attributes of the Cli",
    "lineNumber": 78,
    "testTargets": [
      "Cli#constructor"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it64",
    "access": null,
    "description": "should initiate the options for the Cli",
    "lineNumber": 88,
    "testTargets": [
      "Cli#initOptions"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it65",
    "access": null,
    "description": "should get the help message",
    "lineNumber": 94,
    "testTargets": [
      "Cli#getHelp"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it66",
    "access": null,
    "description": "should print the --help option",
    "lineNumber": 100,
    "testTargets": [
      "Cli#printHelp"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it67",
    "access": null,
    "lineNumber": 112,
    "testTargets": [
      "Cli#mode"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it68",
    "access": null,
    "description": "should invoke no options and print the --help option",
    "lineNumber": 122,
    "testTargets": [
      "Cli#run"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/middleware/Cli.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe61.it69",
    "access": null,
    "description": "should not parse the arguments since there are none",
    "lineNumber": 132,
    "testTargets": [
      "Cli#run"
    ]
  },
  {
    "__docId__": 298,
    "kind": "testFile",
    "name": "test/middleware/Database.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport del from 'del'\nimport mkdirp from 'mkdirp'\nimport mongoose from 'mongoose'\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport { join } from 'path'\n\nimport {\n  Database,\n  PopApi\n} from '../../src'\nimport { name } from '../../package'\n\n/** @test {Database} */\ndescribe('Database', () => {\n  /**\n   * The stub for `process.env`.\n   * @type {Object}\n   */\n  let stub: Object\n\n  /**\n   * The direcotry where the logs are saved.\n   * @type {string}\n   */\n  let logDir: string\n\n  /**\n   * The database manager to connect to mongodb.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the Database tests.\n   * @type {Function}\n   */\n  before(() => {\n    const {\n      MONGO_PORT_27017_TCP_ADDR,\n      NODE_ENV,\n      PATH\n    } = process.env\n    stub = sinon.stub(process, 'env')\n    stub.value({\n      MONGO_PORT_27017_TCP_ADDR,\n      NODE_ENV,\n      PATH\n    })\n\n    logDir = join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    mkdirp.sync(logDir)\n\n    database = new Database(PopApi, {\n      database: name,\n      username: '',\n      password: ''\n    })\n  })\n\n  /** @test {Database#constructor} */\n  it('should test the use the environment variables to connect', () => {\n    const stub = process.env.MONGO_PORT_27017_TCP_ADDR\n    process.env.MONGO_PORT_27017_TCP_ADDR = 'localhost'\n    new Database(PopApi, { // eslint-disable-line no-new\n      database: name\n    })\n\n    process.env.MONGO_PORT_27017_TCP_ADDR = null\n    new Database(PopApi, { // eslint-disable-line no-new\n      database: name\n    })\n    process.env.MONGO_PORT_27017_TCP_ADDR = stub\n\n    try {\n      new Database(PopApi, {}) // eslint-disable-line no-new\n      expect(true).to.be.false\n    } catch (err) {\n      expect(err).to.be.an('Error')\n      expect(err.message).to.equal(\n        '\\'database\\' is a required option for the Database middleware!'\n      )\n    }\n  })\n\n  /** @test {Database#constructor} */\n  it('should check the attributes of the Database', () => {\n    const temp = process.env.MONGO_PORT_27017_TCP_ADDR\n    process.env.MONGO_PORT_27017_TCP_ADDR = null\n    expect(database.hosts).to.exist\n    expect(database.hosts).to.be.an('array')\n    process.env.MONGO_PORT_27017_TCP_ADDR = temp\n\n    expect(database.database).to.exist\n    expect(database.database).to.be.a('string')\n    expect(database.dbPort).to.exist\n    expect(database.dbPort).to.be.a('number')\n    expect(database.username).to.exist\n    expect(database.username).to.be.a('string')\n    expect(database.password).to.exist\n    expect(database.password).to.be.a('string')\n  })\n\n  /** @test {Database#constructor} */\n  it('should fail to create a new Database object', () => {\n    process.env.NODE_ENV = null\n    expect(mongoose.connection.readyState).to.be.a('number')\n    expect(mongoose.connection.readyState).to.equal(0)\n\n    try {\n      new Database(PopApi, { // eslint-disable-line no-new\n        database: name\n      })\n      process.env.NODE_ENV = 'test'\n    } catch (err) {\n      process.env.NODE_ENV = 'test'\n      expect(err).to.be.an('Error')\n    }\n  })\n\n  /**\n   * Test the changing connection state.\n   * @param {!Function} method - Method to change to connection state.\n   * @param {!number} before - The connection state it is before executing the\n   * method to change it.\n   * @param {!number} after - The connection state it is after executing the\n   * method to change it.\n   * @param {Function} done - The method executed when the test is done.\n   * @returns {undefined}\n   */\n  function testConnection(\n    method: Function,\n    before: number,\n    after: number,\n    done: Function\n  ): void {\n    expect(mongoose.connection.readyState).to.be.a('number')\n    expect(mongoose.connection.readyState).to.equal(before)\n\n    method().then(() => {\n      expect(mongoose.connection.readyState).to.be.a('number')\n      expect(mongoose.connection.readyState).to.equal(after)\n\n      done()\n    }).catch(done)\n  }\n\n  /** @test {Database#connect} */\n  it('should connect to MongoDB', done => {\n    testConnection(database.connect.bind(database), 0, 1, done)\n  })\n\n  /** @test {Database#disconnect} */\n  it('should disconnect from MongoDB', done => {\n    testConnection(database.disconnect.bind(database), 1, 0, done)\n  })\n\n  /** @test {Database#connect} */\n  it('should fail to authenticate with MongoDB', done => {\n    expect(mongoose.connection.readyState).to.be.a('number')\n    expect(mongoose.connection.readyState).to.equal(0)\n\n    const database = new Database(PopApi, {\n      database: name,\n      username: 'fault',\n      password: 'faulty'\n    })\n\n    database.connect()\n      .then(done)\n      .catch(err => {\n        expect(err.name).to.equal('MongoError')\n        mongoose.connection.onClose(true)\n\n        done()\n      })\n  })\n\n  /** @test {Database#exportFile} */\n  it('should export a file', done => {\n    const collection = 'example'\n    const outputFile = join(...[\n      logDir,\n      `${collection}s.json`\n    ])\n\n    database.exportFile(collection, outputFile).then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Database#importFile} */\n  it('should import a file', done => {\n    const file = './examples/exampleModel1.json'\n\n    database.importFile('example', file).then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Database#importFile} */\n  it('should not find the file to import', done => {\n    database.importFile('example', '/data/example.json')\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        done()\n      })\n  })\n\n  /**\n   * Hook for tearing down the Database tests.\n   * @type {Function}\n   */\n  after(done => {\n    stub.restore()\n    database.disconnect()\n      .then(() => del([logDir]))\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/Database.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/middleware/Database.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70",
    "access": null,
    "description": "Database",
    "lineNumber": 18,
    "testTargets": [
      "Database"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it71",
    "access": null,
    "description": "should test the use the environment variables to connect",
    "lineNumber": 70,
    "testTargets": [
      "Database#constructor"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it72",
    "access": null,
    "description": "should check the attributes of the Database",
    "lineNumber": 95,
    "testTargets": [
      "Database#constructor"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it73",
    "access": null,
    "description": "should fail to create a new Database object",
    "lineNumber": 113,
    "testTargets": [
      "Database#constructor"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it74",
    "access": null,
    "description": "should connect to MongoDB",
    "lineNumber": 157,
    "testTargets": [
      "Database#connect"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it75",
    "access": null,
    "description": "should disconnect from MongoDB",
    "lineNumber": 162,
    "testTargets": [
      "Database#disconnect"
    ]
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it76",
    "access": null,
    "description": "should fail to authenticate with MongoDB",
    "lineNumber": 167,
    "testTargets": [
      "Database#connect"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it77",
    "access": null,
    "description": "should export a file",
    "lineNumber": 188,
    "testTargets": [
      "Database#exportFile"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it78",
    "access": null,
    "description": "should import a file",
    "lineNumber": 202,
    "testTargets": [
      "Database#importFile"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/middleware/Database.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Database.spec.js~describe70.it79",
    "access": null,
    "description": "should not find the file to import",
    "lineNumber": 212,
    "testTargets": [
      "Database#importFile"
    ]
  },
  {
    "__docId__": 309,
    "kind": "testFile",
    "name": "test/middleware/HttpServer.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport cluster from 'cluster'\nimport del from 'del'\nimport express, { type $Application } from 'express'\nimport http from 'http'\nimport mkdirp from 'mkdirp'\nimport sinon from 'sinon'\nimport winston from 'winston'\nimport { expect } from 'chai'\nimport { join } from 'path'\n\nimport {\n  Database,\n  Logger,\n  HttpServer,\n  PopApi\n} from '../../src'\nimport { name } from '../../package'\n\n/** @test {HttpServer} */\ndescribe('HttpServer', () => {\n  /**\n   * The Express instance to test with.\n   * @type {Express}\n   */\n  let app: $Application\n\n  /**\n   * The http server instance to test.\n   * @type {HttpServer}\n   */\n  let httpServer: HttpServer\n\n  /**\n   * The directory where the logs are saved.\n   * @type {string}\n   */\n  let logDir: string\n\n  /**\n   * Hook for setting up the HttpServer tests.\n   * @type {Function}\n   */\n  before(() => {\n    logDir = join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    mkdirp.sync(logDir)\n    new Logger(PopApi, { // eslint-disable-line no-new\n      name,\n      logDir,\n      pretty: false,\n      quiet: true\n    })\n\n    app = express()\n    httpServer = new HttpServer(PopApi, {\n      app,\n      workers: 0\n    })\n  })\n\n  /** @test {HttpServer#constructor} */\n  it('should create a HttpServer with an Express instance', () => {\n    const stub = sinon.stub(cluster, 'fork')\n    stub.returns(null)\n\n    const httpServer = new HttpServer(PopApi, {\n      app: express()\n    })\n    httpServer.closeApi({\n      disconnect() {}\n    })\n\n    stub.restore()\n\n    try {\n      new HttpServer(PopApi, {}) // eslint-disable-line no-new\n      expect(true).to.be.false\n    } catch (err) {\n      expect(err).to.be.an('Error')\n      expect(err.message).to.equal(\n        '\\'app\\' is a required option for the HttpServer middleware!'\n      )\n    }\n  })\n\n  /** @test {HttpServer#constructor} */\n  it('should create a HttpServer with a Restify instance', () => {\n    const stub = sinon.stub(cluster, 'fork')\n    stub.returns(null)\n\n    const httpServer = new HttpServer(PopApi, {\n      app: http.createServer(() => {})\n    })\n    httpServer.closeApi({\n      disconnect() {}\n    })\n\n    stub.restore()\n  })\n\n  /** @test {HttpServer#constructor} */\n  it('should check the attributes of the HttpServer', () => {\n    expect(httpServer.serverPort).to.exist\n    expect(httpServer.serverPort).to.be.a('number')\n    expect(httpServer.server).to.exist\n    expect(httpServer.server).to.be.an('object')\n    expect(httpServer.workers).to.exist\n    expect(httpServer.workers).to.be.a('number')\n  })\n\n  /** @test {HttpServer#forkWorkers} */\n  it('should fork the workers', () => {\n    const stub = sinon.stub(cluster, 'fork')\n    stub.returns(null)\n\n    httpServer.workers = 2\n    httpServer.forkWorkers()\n\n    httpServer.workers = 0\n    stub.restore()\n  })\n\n  /** @test {HttpServer#workersOnExit} */\n  it('should handle the exit event of the workers', done => {\n    const stub = sinon.stub(cluster, 'fork')\n    stub.returns(null)\n\n    httpServer.workersOnExit()\n\n    cluster.emit('exit', {\n      process: {\n        pid: 1\n      }\n    })\n    stub.restore()\n\n    done()\n  })\n\n  /**\n   * Helper function to test the '_setupApi' method.\n   * @param {!number} workers - The amount of workers to use.\n   * @returns {undefined}\n   */\n  function testSetupApi(workers): void {\n    /** @test {HttpServer#setupApi} */\n    it('should start the API in worker mode', () => {\n      const httpStub = sinon.stub(http, 'createServer')\n      const listen = {\n        listen() {\n          return null\n        }\n      }\n      httpStub.returns(listen)\n\n      const stubMaster = sinon.stub(cluster, 'isMaster')\n      stubMaster.value(false)\n\n      const httpServer = new HttpServer(PopApi, {\n        workers,\n        app: express()\n      })\n      httpServer.setupApi(app)\n\n      httpStub.restore()\n      stubMaster.restore()\n    })\n  }\n\n  // Execute the tests.\n  [0, 1].map(testSetupApi)\n\n  /** @test {HttpServer.closeApi} */\n  it('should close the API', done => {\n    const database = new Database(PopApi, {\n      database: name\n    })\n\n    httpServer.closeApi(database)\n    httpServer.closeApi(database, done)\n  })\n\n  /**\n   * Hook for tearing down the HttpServer tests.\n   * @type {Function}\n   */\n  after(done => {\n    winston.loggers.close()\n    Logger.fileTransport = null\n\n    del([logDir])\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/HttpServer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/middleware/HttpServer.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80",
    "access": null,
    "description": "HttpServer",
    "lineNumber": 23,
    "testTargets": [
      "HttpServer"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it81",
    "access": null,
    "description": "should create a HttpServer with an Express instance",
    "lineNumber": 69,
    "testTargets": [
      "HttpServer#constructor"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it82",
    "access": null,
    "description": "should create a HttpServer with a Restify instance",
    "lineNumber": 94,
    "testTargets": [
      "HttpServer#constructor"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it83",
    "access": null,
    "description": "should check the attributes of the HttpServer",
    "lineNumber": 109,
    "testTargets": [
      "HttpServer#constructor"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it84",
    "access": null,
    "description": "should fork the workers",
    "lineNumber": 119,
    "testTargets": [
      "HttpServer#forkWorkers"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it85",
    "access": null,
    "description": "should handle the exit event of the workers",
    "lineNumber": 131,
    "testTargets": [
      "HttpServer#workersOnExit"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it86",
    "access": null,
    "description": "should start the API in worker mode",
    "lineNumber": 154,
    "testTargets": [
      "HttpServer#setupApi"
    ]
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/middleware/HttpServer.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/HttpServer.spec.js~describe80.it87",
    "access": null,
    "description": "should close the API",
    "lineNumber": 181,
    "testTargets": [
      "HttpServer.closeApi"
    ]
  },
  {
    "__docId__": 318,
    "kind": "testFile",
    "name": "test/middleware/Logger.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport del from 'del'\nimport mkdirp from 'mkdirp'\nimport sinon from 'sinon'\nimport winston from 'winston'\nimport { expect } from 'chai'\nimport { join } from 'path'\n\nimport {\n  Logger,\n  PopApi\n} from '../../src'\nimport { name } from '../../package'\n\n/** @test {Logger} */\ndescribe('Logger', () => {\n  /**\n   * The logger instance to test.\n   * @type {Logger}\n   */\n  let logger: Logger\n\n  /**\n   * The directory where the logs are saved.\n   * @type {string}\n   */\n  let logDir: string\n\n  /**\n   * Hook for setting up the Logger tests.\n   * @type {Function}\n   */\n  before(() => {\n    logDir = join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    mkdirp.sync(logDir)\n\n    logger = new Logger(PopApi, {\n      name,\n      logDir,\n      pretty: false,\n      quiet: true\n    })\n  })\n\n  /** @test {Logger#constructor} */\n  it('should create an ExpressWinston instance', () => {\n    const processStub = sinon.stub(process.env, 'NODE_ENV')\n    processStub.value('development')\n    const padStartStub = sinon.stub(String.prototype, 'padStart')\n    padStartStub.value(undefined)\n\n    const logger = new Logger(PopApi, {\n      name,\n      logDir,\n      pretty: true,\n      quiet: false\n    })\n    expect(logger).to.be.an('object')\n\n    try {\n      new Logger(PopApi, {}) // eslint-disable-line no-new\n      expect(true).to.be.false\n    } catch (err) {\n      expect(err).to.be.an('Error')\n      expect(err.message).to.equal(\n        '\\'name\\' and \\'logDir\\' are required options for the Logger middleware!'\n      )\n    }\n\n    processStub.restore()\n    padStartStub.restore()\n  })\n\n  /** @test {Logger#constructor} */\n  it('should check the attributes of the Logger', () => {\n    expect(logger.levels).to.exist\n    expect(logger.levels).to.be.an('object')\n    expect(logger.name).to.exist\n    expect(logger.name).to.be.a('string')\n    expect(logger.logDir).to.exist\n    expect(logger.logDir).to.be.a('string')\n  })\n\n  /** @test {Logger#getLevelColor} */\n  it('should test if the correct logger colors are returned', () => {\n    const error = logger.getLevelColor('error')\n    expect(error).to.equal('\\x1b[31m')\n    const warn = logger.getLevelColor('warn')\n    expect(warn).to.equal('\\x1b[33m')\n    const info = logger.getLevelColor('info')\n    expect(info).to.equal('\\x1b[36m')\n    const debug = logger.getLevelColor('debug')\n    expect(debug).to.equal('\\x1b[34m')\n    const nothing = logger.getLevelColor(undefined)\n    expect(nothing).to.equal('\\x1b[36m')\n  })\n\n  /** @test {Logger#prettyPrintConsole} */\n  it('should enrich the info object to pretty print the console', () => {\n    let info = {\n      level: 'info',\n      message: 'This is a test message'\n    }\n    info = logger.prettyPrintConsole(info)\n\n    expect(info.level).to.be.a('string')\n    expect(info.message).to.be.a('string')\n    expect(info.splat).to.be.an('array')\n  })\n\n  /** @test {Logger#_getMessage} */\n  it('should get the message string from the info object', () => {\n    expect(logger._getMessage({\n      level: 'info',\n      message: 'This is a test message'\n    })).to.be.a('string')\n  })\n\n  /** @test {Logger#consoleFormatter} */\n  it('should make the console formatter', () => {\n    expect(logger.consoleFormatter()).to.be.an('object')\n  })\n\n  /** @test {Logger#fileFormatter} */\n  it('should make the file formatter', () => {\n    expect(logger.fileFormatter()).to.be.an('object')\n  })\n\n  /** @test {Logger#getConsoleTransport} */\n  it('should get a configured winston console transport', () => {\n    const transport = logger.getConsoleTransport()\n    expect(transport).to.be.an('object')\n  })\n\n  /** @test {Logger#getFileTransport} */\n  it('should get a configured winston file transport', () => {\n    const transport = logger.getFileTransport(`${name}-app`)\n    expect(transport).to.be.an('object')\n    transport.close()\n  })\n\n  /** @test {Logger#createLoggerInstance} */\n  it('should create a configured winston instance', () => {\n    const logy = logger.createLoggerInstance('app')\n    expect(logy).to.be.an('object')\n  })\n\n  /** @test {Logger#createLoggerInstance} */\n  it('should create a configured winston instance', () => {\n    const stub = process.env.TEMP_DIR\n    process.env.TEMP_DIR = null\n\n    const logy = logger.createLoggerInstance('app')\n    expect(logy).to.be.an('object')\n\n    process.env.TEMP_DIR = stub\n  })\n\n  /** @test {Logger#getHttpLoggerMessage} */\n  it('should get the message to print for express-winston', () => {\n    const message = logger.getHttpLoggerMessage({\n      method: 'GET',\n      url: 'http://mock.us'\n    }, {\n      statusCode: 418,\n      responseTime: 420\n    })\n    expect(message).to.be.a('string')\n  })\n\n  /** @test {Logger#createHttpLogger} */\n  it('should create a configured Http logger instance', () => {\n    const logy = logger.createHttpLogger()\n    expect(logy).to.be.a('function')\n  })\n\n  /** @test {Logger#createHttpLogger} */\n  it('should create a configured Http logger instance with developer output', () => {\n    const stub = sinon.stub(process.env, 'NODE_ENV')\n    stub.value('development')\n\n    const logy = logger.createHttpLogger()\n    expect(logy).to.be.a('function')\n\n    stub.restore()\n  })\n\n  /** @test {Logger#createLogger} */\n  it('should create the global logger object', () => {\n    let val = logger.createLogger(true, true)\n    expect(val).to.be.an('object')\n\n    val = logger.createLogger(false, false)\n    expect(val).to.be.an('object')\n\n    val = logger.createLogger(false, true)\n    expect(val).to.be.an('object')\n  })\n\n  /** @test {Logger#getLogger} */\n  it('should not create an instance of ExpressWinston or Winston', () => {\n    expect(logger.getLogger()).to.be.undefined\n    expect(logger.getLogger('FAULTY')).to.be.undefined\n  })\n\n  /**\n   * Hook for tearing down the Logger tests.\n   * @type {Function}\n   */\n  after(done => {\n    winston.loggers.close()\n    Logger.fileTransport = null\n\n    del([logDir])\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/Logger.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/middleware/Logger.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88",
    "access": null,
    "description": "Logger",
    "lineNumber": 18,
    "testTargets": [
      "Logger"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it89",
    "access": null,
    "description": "should create an ExpressWinston instance",
    "lineNumber": 53,
    "testTargets": [
      "Logger#constructor"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it90",
    "access": null,
    "description": "should check the attributes of the Logger",
    "lineNumber": 82,
    "testTargets": [
      "Logger#constructor"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it91",
    "access": null,
    "description": "should test if the correct logger colors are returned",
    "lineNumber": 92,
    "testTargets": [
      "Logger#getLevelColor"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it92",
    "access": null,
    "description": "should enrich the info object to pretty print the console",
    "lineNumber": 106,
    "testTargets": [
      "Logger#prettyPrintConsole"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it93",
    "access": null,
    "description": "should get the message string from the info object",
    "lineNumber": 119,
    "testTargets": [
      "Logger#_getMessage"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it94",
    "access": null,
    "description": "should make the console formatter",
    "lineNumber": 127,
    "testTargets": [
      "Logger#consoleFormatter"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it95",
    "access": null,
    "description": "should make the file formatter",
    "lineNumber": 132,
    "testTargets": [
      "Logger#fileFormatter"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it96",
    "access": null,
    "description": "should get a configured winston console transport",
    "lineNumber": 137,
    "testTargets": [
      "Logger#getConsoleTransport"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it97",
    "access": null,
    "description": "should get a configured winston file transport",
    "lineNumber": 143,
    "testTargets": [
      "Logger#getFileTransport"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it98",
    "access": null,
    "description": "should create a configured winston instance",
    "lineNumber": 150,
    "testTargets": [
      "Logger#createLoggerInstance"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it99",
    "access": null,
    "description": "should create a configured winston instance",
    "lineNumber": 156,
    "testTargets": [
      "Logger#createLoggerInstance"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it100",
    "access": null,
    "description": "should get the message to print for express-winston",
    "lineNumber": 167,
    "testTargets": [
      "Logger#getHttpLoggerMessage"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it101",
    "access": null,
    "description": "should create a configured Http logger instance",
    "lineNumber": 179,
    "testTargets": [
      "Logger#createHttpLogger"
    ]
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it102",
    "access": null,
    "description": "should create a configured Http logger instance with developer output",
    "lineNumber": 185,
    "testTargets": [
      "Logger#createHttpLogger"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it103",
    "access": null,
    "description": "should create the global logger object",
    "lineNumber": 196,
    "testTargets": [
      "Logger#createLogger"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/middleware/Logger.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Logger.spec.js~describe88.it104",
    "access": null,
    "description": "should not create an instance of ExpressWinston or Winston",
    "lineNumber": 208,
    "testTargets": [
      "Logger#getLogger"
    ]
  },
  {
    "__docId__": 336,
    "kind": "testFile",
    "name": "test/middleware/Routes.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\nimport express, { type $Application } from 'express'\nimport sinon from 'sinon'\nimport supertest from 'supertest'\nimport winston from 'winston'\nimport { join } from 'path'\n\nimport {\n  ContentService,\n  Logger,\n  Routes,\n  PopApi\n} from '../../src'\nimport {\n  ExampleController,\n  ExampleModel\n} from '../../examples'\nimport { name } from '../../package'\n\n/** @test {Routes} */\ndescribe('Routes', () => {\n  /**\n   * The express instance to test with.\n   * @type {Express}\n   */\n  let app: $Application\n\n  /**\n   * The controllers to register.\n   * @type {Array<Object>}\n   */\n  let controllers: Array<Object>\n\n  /**\n   * The routes instance to test.\n   * @type {Server}\n   */\n  let routes: Routes\n\n  /**\n   * The supertest object to test with.\n   * @type {Object}\n   */\n  let request: Object\n\n  /**\n   * Hook for setting up the Routes tests.\n   * @type {Function}\n   */\n  before(() => {\n    app = express()\n    controllers = [{\n      Controller: ExampleController,\n      args: {\n        basePath: 'example',\n        service: new ContentService({\n          Model: ExampleModel,\n          projection: {\n            name: 1\n          },\n          query: {}\n        })\n      }\n    }]\n\n    PopApi.httpLogger = (req, res, next) => next()\n    routes = new Routes(PopApi, {\n      app,\n      controllers\n    })\n    request = supertest(app)\n  })\n\n  /** @test {Routes#constructor} */\n  it('should register the routes when creating a new Routes object', () => {\n    new Routes(PopApi, { app }) // eslint-disable-line no-new\n\n    try {\n      new Routes(PopApi, {}) // eslint-disable-line no-new\n      expect(true).to.be.false\n    } catch (err) {\n      expect(err).to.be.an('Error')\n      expect(err.message).to.equal(\n        '\\'app\\' is a required option for the Routes middleware!'\n      )\n    }\n  })\n\n  /** @test {Routes#registerControllers} */\n  it('should register a controller', () => {\n    const exp = express()\n    const registered = routes.registerControllers(exp, PopApi, controllers)\n\n    expect(registered).to.be.undefined\n  })\n\n  /** @test {Routes#convertErrors} */\n  it('should catch a 500 internal server error with a default error', done => {\n    request.get('/error')\n      .expect(500)\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {Routes#setNotFoundHandler} */\n  it('should catch a 404 not found error', done => {\n    request.get('/not-found')\n      .expect(404)\n      .then(() => done())\n      .catch(done)\n  })\n\n  /**\n   * Helper function for the 'setErrorHandler' method.\n   * @param {!string} env - The value for the NODE_ENV stub.\n   * @returns {undefined}\n   */\n  function testErrorHandler(env: string): void {\n    /** @test {Routes#setErrorHandler} */\n    it('should catch a 500 internal server error with a custom error', done => {\n      const stub = sinon.stub(process, 'env')\n      stub.value({\n        NODE_ENV: env\n      })\n\n      request.get('/custom-error')\n        .expect(500)\n        .then(() => {\n          stub.restore()\n          done()\n        })\n        .catch(done)\n    })\n  }\n\n  // Execute the tests.\n  ['development', 'test'].map(testErrorHandler)\n\n  /** @test {Routes#removeServerHeader} */\n  it('should remove the security headers', done => {\n    request.get('/hello/world')\n      .expect(200)\n      .expect(res => {\n        expect(res.headers['server']).to.be.undefined\n      })\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {Routes#preRoutes} */\n  it('should add the security headers', done => {\n    request.get('/hello/world')\n      .expect(200)\n      .expect('X-Content-Type-Options', 'nosniff')\n      .expect('Content-Security-Policy', 'default-src \\'none\\'')\n      .expect('X-Frame-Options', 'SAMEORIGIN')\n      .expect('X-DNS-Prefetch-Control', 'off')\n      .expect('X-Download-Options', 'noopen')\n      .expect('X-XSS-Protection', '1; mode=block')\n      .expect(res => {\n        expect(res.headers['strict-transport-security']).to.be.a('string')\n        expect(res.headers['x-powered-by']).to.be.undefined\n        expect(res.headers['x-aspnet-version']).to.be.undefined\n      })\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {Routes#preRoutes} */\n  it('should execute the pre routes hook', () => {\n    const res = routes.preRoutes(express())\n    expect(res).to.be.undefined\n  })\n\n  /** @test {Routes#postRoutes} */\n  it('should execute the post routes hook', () => {\n    const res = routes.postRoutes(express())\n    expect(res).to.be.undefined\n  })\n\n  /** @test {Routes#setupRoutes} */\n  it('should setup the Express instance', () => {\n    const exp = express()\n    new Logger(PopApi, { // eslint-disable-line no-new\n      name,\n      logDir: join(...[\n        __dirname,\n        '..',\n        '..',\n        'tmp'\n      ])\n    })\n\n    routes.setupRoutes(exp, PopApi)\n    expect(express).to.not.equal(express())\n\n    winston.loggers.close()\n    Logger.fileTransport = null\n  })\n\n  /** @test {Routes#setupRoutes} */\n  it('should setup the Express instance', () => {\n    const exp = express()\n    routes.setupRoutes(exp)\n    expect(express).to.not.equal(express())\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/Routes.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/middleware/Routes.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105",
    "access": null,
    "description": "Routes",
    "lineNumber": 24,
    "testTargets": [
      "Routes"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it106",
    "access": null,
    "description": "should register the routes when creating a new Routes object",
    "lineNumber": 78,
    "testTargets": [
      "Routes#constructor"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it107",
    "access": null,
    "description": "should register a controller",
    "lineNumber": 93,
    "testTargets": [
      "Routes#registerControllers"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it108",
    "access": null,
    "description": "should catch a 500 internal server error with a default error",
    "lineNumber": 101,
    "testTargets": [
      "Routes#convertErrors"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it109",
    "access": null,
    "description": "should catch a 404 not found error",
    "lineNumber": 109,
    "testTargets": [
      "Routes#setNotFoundHandler"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it110",
    "access": null,
    "description": "should catch a 500 internal server error with a custom error",
    "lineNumber": 123,
    "testTargets": [
      "Routes#setErrorHandler"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it111",
    "access": null,
    "description": "should remove the security headers",
    "lineNumber": 143,
    "testTargets": [
      "Routes#removeServerHeader"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it112",
    "access": null,
    "description": "should add the security headers",
    "lineNumber": 154,
    "testTargets": [
      "Routes#preRoutes"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it113",
    "access": null,
    "description": "should execute the pre routes hook",
    "lineNumber": 173,
    "testTargets": [
      "Routes#preRoutes"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it114",
    "access": null,
    "description": "should execute the post routes hook",
    "lineNumber": 179,
    "testTargets": [
      "Routes#postRoutes"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it115",
    "access": null,
    "description": "should setup the Express instance",
    "lineNumber": 185,
    "testTargets": [
      "Routes#setupRoutes"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/middleware/Routes.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Routes.spec.js~describe105.it116",
    "access": null,
    "description": "should setup the Express instance",
    "lineNumber": 205,
    "testTargets": [
      "Routes#setupRoutes"
    ]
  },
  {
    "__docId__": 349,
    "kind": "testFile",
    "name": "test/middleware/internal/padStart.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-extend-native */\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport { padStart } from '../../../src/middleware/internal'\n\n/** @test {padStart} */\ndescribe('padStart', () => {\n  /**\n   * Temp holder for the padStart function.\n   * @type {Function}\n   */\n  let tmpPadStart: any\n\n  /**\n   * Hook for setting up the padStart tests.\n   * @type {Function}\n   */\n  before(() => {\n    tmpPadStart = String.prototype.padStart\n    // @flow-ignore\n    String.prototype.padStart = padStart\n  })\n\n  /** @test {padStart} */\n  it('should pad a string', () => {\n    let res = 'foo'.padStart(1)\n    expect(res.length).to.equal(3)\n\n    res = 'foobar'.padStart(1, 'baz')\n    expect(res.length).to.equal(6)\n\n    res = ''.padStart(4, 'baz')\n    expect(res.length).to.equal(4)\n\n    res = 'quz'.padStart(4, 'quux')\n    expect(res.length).to.equal(4)\n  })\n\n  /**\n   * Hook for tearing down the padStart tests.\n   * @type {Function}\n   */\n  after(() => {\n    // @flow-ignore\n    String.prototype.padStart = tmpPadStart\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/middleware/internal/padStart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/middleware/internal/padStart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/internal/padStart.spec.js~describe117",
    "access": null,
    "description": "padStart",
    "lineNumber": 10,
    "testTargets": [
      "padStart"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/middleware/internal/padStart.spec.js~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/internal/padStart.spec.js~describe117.it118",
    "access": null,
    "description": "should pad a string",
    "lineNumber": 28,
    "testTargets": [
      "padStart"
    ]
  },
  {
    "__docId__": 352,
    "kind": "testFile",
    "name": "test/utils.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport del from 'del'\nimport { expect } from 'chai'\nimport { join } from 'path'\n\nimport { utils } from '../src'\n\ndescribe('utils', () => {\n  /**\n   * The path the to the temporary directory to test.\n   * @type {string}\n   */\n  let tmp: string\n\n  /**\n   * Hook for setting up the utils tests.\n   * @type {Function}\n   */\n  before(done => {\n    tmp = join(...[\n      __dirname,\n      '..',\n      'tmp'\n    ])\n    del(tmp)\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {createTemp} */\n  it('should create the temporary directory', done => {\n    utils.createTemp(tmp).then(res => {\n      expect(res).to.be.a('string')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {createTemp} */\n  it('should remove the files from the temporary directory', done => {\n    utils.createTemp(tmp).then(res => {\n      expect(res).to.be.a('string')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {executeCommand} */\n  it('should successfully execute a command', done => {\n    utils.executeCommand('git', [\n      'rev-parse',\n      '--short',\n      'HEAD'\n    ]).then(res => {\n      expect(res).to.be.a('string')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {executeCommand} */\n  it('should fail to execute a command', done => {\n    utils.executeCommand('gi', [\n      'rev-parse',\n      '--short',\n      'HEAD'\n    ]).then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        done()\n      })\n  })\n})\n",
    "static": true,
    "longname": "/Users/reejosamuel/Documents/scrap/pop-api/test/utils.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/utils.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils.spec.js~describe119",
    "access": null,
    "description": "utils",
    "lineNumber": 10
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/utils.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe119.it120",
    "access": null,
    "description": "should create the temporary directory",
    "lineNumber": 33,
    "testTargets": [
      "createTemp"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/utils.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe119.it121",
    "access": null,
    "description": "should remove the files from the temporary directory",
    "lineNumber": 41,
    "testTargets": [
      "createTemp"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/utils.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe119.it122",
    "access": null,
    "description": "should successfully execute a command",
    "lineNumber": 49,
    "testTargets": [
      "executeCommand"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/utils.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe119.it123",
    "access": null,
    "description": "should fail to execute a command",
    "lineNumber": 61,
    "testTargets": [
      "executeCommand"
    ]
  }
]